<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cnbv.Sait.Utilities</name>
    </assembly>
    <members>
        <member name="T:Cnbv.Sait.Utilities.Interop.LogOnProvider">
            <summary>
            Tipos de proveedores para inicio de sesión.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnProvider.Default">
            <summary>
            Usa el proveedor estándar para el sistema. El proveedor por defecto de seguridad 
            es negociar, a menos que se use <see langword="null"/> como nombre de dominio 
            y el nombre del usuario no este en formato UPN, en este caso el proveedor por 
            defecto es NTLM.  
            <para>
            Windows 2000: El proveedor por defecto de seguridad es NTLM.
            </para>
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnProvider.WinNT35">
            <summary>
            Usa el proveedor por defecto de Windows NT 3.5.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnProvider.WinNT40">
            <summary>
            Usa el proveedor de inicio de sesión NTLM.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnProvider.WinNT50">
            <summary>
            Usa el proveedor de inicio de sesión negociador.
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions">
            <summary>
            Contiene métodos genéricos para obtener valores de las columnas de un objeto 
            <see cref="T:System.Data.IDataRecord"/>.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetBooleanOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Boolean"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                bool value = data.GetBooleanOrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetBooleanOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de 
            <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                bool? value = data.GetBooleanOrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetByteOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Byte"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                byte value = data.GetByteOrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetByteOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                byte? value = data.GetByteOrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetDateTimeOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.DateTime"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                DateTime value = data.GetDateTimeOrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetDateTimeOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de 
            <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                DateTime? value = data.GetDateTimeOrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetDecimalOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Decimal"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                decimal value = data.GetDecimalOrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetDecimalOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de 
            <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                decimal? value = data.GetDecimalOrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetDoubleOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Double"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                double value = data.GetDoubleOrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetDoubleOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de 
            <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                double? value = data.GetDoubleOrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetFloatOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Single"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                float value = data.GetFloatOrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetFloatOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de 
            <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                float? value = data.GetFloatOrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetGuidOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Guid"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                Guid value = data.GetGuidOrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetGuidOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                Guid? value = data.GetGuidOrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetInt16OrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Int16"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                short value = data.GetInt16OrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetInt16OrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de 
            <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                short? value = data.GetInt16OrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetInt32OrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Int32"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                int value = data.GetInt32OrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetInt32OrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de 
            <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                int? value = data.GetInt32OrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetInt64OrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.Int64"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                long value = data.GetInt64OrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetInt64OrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa el valor por defecto de 
            <see cref="T:System.Nullable`1"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                long? value = data.GetInt64OrNull(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetStringOrDefault(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual a 
            <see cref="T:System.DBNull"/> se regresa el valor por defecto de <see cref="T:System.String"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                string value = data.GetStringOrDefault(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetStringOrEmpty(System.Data.IDataRecord,System.Int32)">
            <summary>
            Regresa el valor de la columna especificada.
            </summary>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa <see cref="F:System.String.Empty"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                string value = data.GetStringOrEmpty(0);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.Int32,``0)">
            <summary>
            Regresa el valor de la columna especificada según el tipo de {T}. Si el valor de 
            la columna es <see cref="T:System.DBNull"/> el método regresa el valor por defecto 
            especificado por <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">
            El tipo del valor de la columna.
            </typeparam>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="index">
            El índice de la columna de la cual se obtendrá el valor.
            </param>
            <param name="defaultValue">
            Valor por defecto que se usara en caso de que el valor de la columna sea igual a 
            <see cref="T:System.DBNull"/>.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa <paramref name="defaultValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="record"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                short value = data.GetValueOrDefault(0, default(short));
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.IDataRecordExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.String,``0)">
            <summary>
            Regresa el valor de la columna especificada según el tipo de {T}. Si el valor de 
            la columna es <see cref="T:System.DBNull"/> el método regresa el valor por defecto especificado 
            por <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">
            El tipo del valor de la columna.
            </typeparam>
            <param name="record">
            Objeto <see cref="T:System.Data.IDataRecord"/> del cual se obtendrá el valor de la columna.
            </param>
            <param name="name">
            Nombre de la columna de la cual se obtendrá su valor.
            </param>
            <param name="defaultValue">
            Valor por defecto que se usara en caso de que el valor de la columna sea igual a 
            <see cref="T:System.DBNull"/>.
            </param>
            <returns>
            El valor de la columna en el objeto <see cref="T:System.Data.IDataRecord"/>, si el valor es igual 
            a <see cref="T:System.DBNull"/> se regresa <paramref name="defaultValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="record"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.Data;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void GetValue(IDataRecord data)
              {
                short value = data.GetValueOrDefault("columna", default(short));
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.ResourceType">
            <summary>
            Indica el tipo de recurso.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceType.Any">
            <summary>
            El recurso puede ser de mas de un tipo. por ejemplo un contenedor para impresoras 
            y recursos en disco, o un recurso que no es ni impresora ni disco.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceType.Disk">
            <summary>
            El recurso es un recurso compartido en disco.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceType.Print">
            <summary>
            El recurso es una impresora compartida.
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.NativeMethods">
            <summary>
            Clase con las llamadas al API de Windows.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NativeMethods.LogOnUser(System.String,System.String,System.IntPtr,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Llama al API de Windows para autenticar al usuario.
            </summary>
            <param name="userName">ID del usuario a validar.</param>
            <param name="domain">Dominio en donde se validara al usuario.</param>
            <param name="password">Contraseña del usuario a validar.</param>
            <param name="logOnType">Tipo de inicio de sesión.</param>
            <param name="logOnProvider">El proveedor de inicio de sesión.</param>
            <param name="token">Llave del usuario en el dominio.</param>
            <returns>
            <see langword="true"/> si la autenticación del usuario fue exitosa, 
            <see langword="false"/> en caso contrario.
            </returns>
            <remarks>
            Si la autenticación del usuario fue exitosa <paramref name="token"/> 
            almacena la llave del usuario en la computadora o dominio.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>
            Llamado al API de Windows para liberar la referencia a un manejador de memoria.
            </summary>
            <param name="handle">
            Manejador que de memoria.
            </param>
            <returns>
            <see langword="true"/> si se pudo liberar la referencia, 
            <see langword="false"/> si hubo un error.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NativeMethods.WNetAddConnection(Cnbv.Sait.Utilities.Interop.NetResource@,System.String,System.String,Cnbv.Sait.Utilities.Interop.ConnectionOptions)">
            <summary>
            Hace una conexión a un recurso de red. La función direcciona un dispositivo 
            local a un recurso de red.
            </summary>
            <param name="netResource">
            Un puntero a una estructura <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> que especifica los detalles 
            de la conexión, dichos detalles pueden ser información acerca del recurso de red, 
            el dispositivo local y el proveedor de red.
            </param>
            <param name="password">
            Un puntero a una cadena terminada en nulo que especifica la contraseña a usar 
            para realizar la conexión. Si <paramref name="password"/> es 
            <see langword="null"/> la función usa la contraseña 
            asociada con el usuario indicado <paramref name="userId"/>. Si 
            <paramref name="password"/> es <see cref="F:System.String.Empty"/> la función no usa una 
            contraseña. Si la conexión falla por que se uso una contraseña invalida y la 
            bandera <see cref="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectInteractive"/> esta activa la función 
            despliega una ventana de dialogo preguntándole al usuario por la contraseña.
            <para>
            En Windows Me/98/95: este parámetro debe de ser <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </para>
            </param>
            <param name="userId">
            Un puntero a una cadena terminada en nulo que especifica el ID del usuario a usar 
            para realizar la conexión. Si <paramref name="userId"/> es <see langword="null"/> 
            la función usa el ID del usuario que este ejecutando el proceso. 
            <paramref name="userId"/> se usa cuando los usuarios se desean conectarse a un 
            recurso de red para el cual se les ha asignado una cuenta distinta a su cuenta 
            normal. El ID del usuario representa un contexto de seguridad que puede ser 
            especifico a un proveedor de red. 
            <para>
            En Windows Me/98/95: este parámetro debe de ser <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </para>
            </param>
            <param name="options">
            Un conjunto de valores de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/> que 
            representan las opciones para realizar la conexión.
            </param>
            <returns>
            Regresa el código del resultado de la operación, si no hubo error el resultado 
            es cero.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NativeMethods.WNetCancelConnection(System.String,Cnbv.Sait.Utilities.Interop.DisconnectionType,System.Boolean)">
            <summary>
            Cancela la conexión a un recurso de red. También se puede usar la función 
            para eliminar conexiones en cache las cuales no están actualmente conectadas.
            </summary>
            <param name="name">
            Un puntero a una cadena terminada en nulo que especifica el nombre del 
            dispositivo local o del recurso de red compartido del cual se quiere 
            desconectar. Si este parámetro especifica un dispositivo local esta función 
            cancela solamente el dispositivo especificado. Si el parámetro especifica un 
            recurso de red remoto se cancelan todas las conexiones que no tengan 
            asociado un dispositivo local.
            </param>
            <param name="type">
            Un valor de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.DisconnectionType"/> que representa la opción 
            para realizar la desconexión.
            </param>
            <param name="force">
            Especifica si la desconexión debe de ocurrir aun si hay archivos abiertos o 
            trabajos pendientes en la conexión. Si este parámetro es <see langword="false"/> la 
            función falla si existen archivos abiertos o trabajos pendientes.
            </param>
            <returns>
            Regresa el código del resultado de la operación, si no hubo error el resultado 
            es cero.
            </returns>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Conversions.DataConversions">
            <summary>
            Contiene métodos de extensión para crear objetos que heredan de 
            <see cref="T:System.Data.Common.DbParameter"/> a partir de distintos objetos.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOdbcParameter``1(``0,System.String,System.Data.Odbc.OdbcType)">
            <summary>
            Crea un objeto <see cref="T:System.Data.Odbc.OdbcParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.Odbc.OdbcType"/> que indica el tipo del 
            parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.Odbc.OdbcParameter"/>.
            </returns>
            <remarks>
            La dirección del parámetro es <see cref="F:System.Data.ParameterDirection.Input"/>.
            </remarks>
            <example>
            <code language="c#">
            using System.Data;
            using System.Data.Odbc;
            using Cnbv.Sait.Utilities.Conversions;
            public void Convert()
            {
              string name = "@nombre";
              string value = "erika";
              OdbcParameter parameter = value.ToOdbcParameter(
                name, OdbcType.NVarChar, 10, ParameterDirection.InputOutput);
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOdbcParameter``1(``0,System.String,System.Data.Odbc.OdbcType,System.Nullable{System.Int32})">
            <summary>
            Crea un objeto <see cref="T:System.Data.Odbc.OdbcParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.Odbc.OdbcType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="size">
            El tamaño maximo en bytes de la información de la columna.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.Odbc.OdbcParameter"/>.
            </returns>
            <remarks>
            <para>
            La dirección del parámetro es <see cref="F:System.Data.ParameterDirection.Input"/>.
            </para>
            <para>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOdbcParameter``1(``0,System.String,System.Data.Odbc.OdbcType)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOdbcParameter``1(``0,System.String,System.Data.Odbc.OdbcType,System.Data.ParameterDirection)">
            <summary>
            Crea un objeto <see cref="T:System.Data.Odbc.OdbcParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.Odbc.OdbcType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="direction">
            Uno de los valores de la enumeración <see cref="T:System.Data.ParameterDirection"/> que indica la 
            dirección del parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.Odbc.OdbcParameter"/>.
            </returns>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOdbcParameter``1(``0,System.String,System.Data.Odbc.OdbcType)"/>.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOdbcParameter``1(``0,System.String,System.Data.Odbc.OdbcType,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Crea un objeto <see cref="T:System.Data.Odbc.OdbcParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.Odbc.OdbcType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="size">
            El tamaño maximo en bytes de la información de la columna.
            </param>
            <param name="direction">
            Uno de los valores de la enumeración <see cref="T:System.Data.ParameterDirection"/> que indica la 
            dirección del parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.Odbc.OdbcParameter"/>.
            </returns>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOdbcParameter``1(``0,System.String,System.Data.Odbc.OdbcType)"/>.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOleDBParameter``1(``0,System.String,System.Data.OleDb.OleDbType)">
            <summary>
            Crea un objeto <see cref="T:System.Data.OleDb.OleDbParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.OleDb.OleDbType"/> que indica el tipo del 
            parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.OleDb.OleDbParameter"/>.
            </returns>
            <remarks>
            La dirección del parámetro es <see cref="F:System.Data.ParameterDirection.Input"/>.
            </remarks>
            <example>
            <code language="c#">
            using System.Data;
            using System.Data.OleDb;
            using Cnbv.Sait.Utilities.Conversions;
            public void Convert()
            {
              string name = "@nombre";
              string value = "erika";
              OleDbParameter parameter = value.ToOleDBParameter(
                name, OleDbType.VarChar,10,ParameterDirection.InputOutput);
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOleDBParameter``1(``0,System.String,System.Data.OleDb.OleDbType,System.Nullable{System.Int32})">
            <summary>
            Crea un objeto <see cref="T:System.Data.OleDb.OleDbParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.OleDb.OleDbType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="size">
            El tamaño maximo en bytes de la información de la columna.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.OleDb.OleDbParameter"/>.
            </returns>
            <remarks>
            <para>
            La dirección del parámetro es <see cref="F:System.Data.ParameterDirection.Input"/>.
            </para>
            <para>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOleDBParameter``1(``0,System.String,System.Data.OleDb.OleDbType)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOleDBParameter``1(``0,System.String,System.Data.OleDb.OleDbType,System.Data.ParameterDirection)">
            <summary>
            Crea un objeto <see cref="T:System.Data.OleDb.OleDbParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.OleDb.OleDbType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="direction">
            Uno de los valores de la enumeración <see cref="T:System.Data.ParameterDirection"/> que indica la 
            dirección del parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.OleDb.OleDbParameter"/>.
            </returns>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOleDBParameter``1(``0,System.String,System.Data.OleDb.OleDbType)"/>.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOleDBParameter``1(``0,System.String,System.Data.OleDb.OleDbType,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Crea un objeto <see cref="T:System.Data.OleDb.OleDbParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.OleDb.OleDbType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="size">
            El tamaño maximo en bytes de la información de la columna.
            </param>
            <param name="direction">
            Uno de los valores de la enumeración <see cref="T:System.Data.ParameterDirection"/> que indica la 
            dirección del parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.OleDb.OleDbParameter"/>.
            </returns>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToOleDBParameter``1(``0,System.String,System.Data.OleDb.OleDbType)"/>.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToSqlParameter``1(``0,System.String,System.Data.SqlDbType)">
            <summary>
            Crea un objeto <see cref="T:System.Data.SqlClient.SqlParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.SqlDbType"/> que indica el tipo del 
            parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.SqlClient.SqlParameter"/>.
            </returns>
            <remarks>
            La dirección del parámetro es <see cref="F:System.Data.ParameterDirection.Input"/>.
            </remarks>
            <example>
            <code language="c#">
            using System.Data;
            using System.Data.SqlClient;
            using Cnbv.Sait.Utilities.Conversions;
            public void Convert()
            {
              string name = "@nombre";
              string value = "erika";
              SqlParameter parameter = value.ToSqlParameter(
                name, SqlDbType.VarChar,10,ParameterDirection.InputOutput);
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToSqlParameter``1(``0,System.String,System.Data.SqlDbType,System.Nullable{System.Int32})">
            <summary>
            Crea un objeto <see cref="T:System.Data.SqlClient.SqlParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.SqlDbType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="size">
            El tamaño maximo en bytes de la información de la columna.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.SqlClient.SqlParameter"/>.
            </returns>
            <remarks>
            <para>
            La dirección del parámetro es <see cref="F:System.Data.ParameterDirection.Input"/>.
            </para>
            <para>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToSqlParameter``1(``0,System.String,System.Data.SqlDbType)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToSqlParameter``1(``0,System.String,System.Data.SqlDbType,System.Data.ParameterDirection)">
            <summary>
            Crea un objeto <see cref="T:System.Data.SqlClient.SqlParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.SqlDbType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="direction">
            Uno de los valores de la enumeración <see cref="T:System.Data.ParameterDirection"/> que indica la 
            dirección del parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.SqlClient.SqlParameter"/>.
            </returns>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToSqlParameter``1(``0,System.String,System.Data.SqlDbType)"/>.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToSqlParameter``1(``0,System.String,System.Data.SqlDbType,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Crea un objeto <see cref="T:System.Data.SqlClient.SqlParameter"/> ussando como base los parámetros 
            especificados.
            </summary>
            <typeparam name="T">El tipo del valor que tendrá el parámetro.</typeparam>
            <param name="value">El valor del parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="type">
            Uno de los valores de la enumeración <see cref="T:System.Data.SqlDbType"/> que indica el tipo del 
            parámetro.
            </param>
            <param name="size">
            El tamaño maximo en bytes de la información de la columna.
            </param>
            <param name="direction">
            Uno de los valores de la enumeración <see cref="T:System.Data.ParameterDirection"/> que indica la 
            dirección del parámetro.
            </param>
            <returns>
            Un objeto <see cref="T:System.Data.SqlClient.SqlParameter"/>.
            </returns>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="M:Cnbv.Sait.Utilities.Conversions.DataConversions.ToSqlParameter``1(``0,System.String,System.Data.SqlDbType)"/>.
            </remarks>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Validations.TypeValidations">
            <summary>
            Contiene métodos genéricos para la validación de datos (cadenas, fechas, números).
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsByte(System.String)">
            <summary>
            Indica si la cadena representa un entero sin signo de 8 bits.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un 
            <see cref="T:System.Byte"/>, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string currentByte)
             {
              if (currentByte.IsByte())
              {
               //operaciones para un byte valido.
              }
              else
              {
               //notificar que la cadena no representa un byte.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsDateTime(System.String,System.IFormatProvider)">
            <summary>
            Indica si la cadena representa un valor valido de <see cref="T:System.DateTime"/>.
            </summary>
            <param name="source">La cadena a validar.</param>
            <param name="provider">
            Un objeto que implementa la interfaz <see cref="T:System.IFormatProvider"/> que provee 
            información para formato de la cultura.
            </param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un 
            objeto <see cref="T:System.DateTime"/> valido, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System.Globalization;
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckDate(string currentDate)
             {
              if(currentDate.IsDateTime(CultureInfo.CurrentCulture))
              {
               //operaciones para una fecha valida.
              }
              else
              {
               //notificar que la fecha es invalida.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsDouble(System.String)">
            <summary>
            Indica si la cadena representa un número de punto flotante de precisión doble.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un 
            <see cref="T:System.Double"/>, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string number)
             {
              if(number.IsDouble())
              {
               //operaciones para un número de punto flotante de precisión doble.
              }
              else
              {
               //notificar que la cadena no representa un número de punto flotante 
               //de precisión doble.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsSingle(System.String)">
            <summary>
            Indica si la cadena representa un número de punto flotante de precisión sencilla.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un número de punto 
            flotante de precisión sencilla, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string number)
             {
              if (number.IsSingle())
              {
               //operaciones para un número de punto flotante de precisión sencilla.
              }
              else
              {
               //notificar que la cadena no representa un número de punto flotante 
               //de precisión sencilla.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsInt16(System.String)">
            <summary>
            Indica si la cadena representa un entero con signo de 16 bits.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un entero 
            con signo de 16 bits, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string number)
             {
              if(number.IsInt16())
              {
               //operaciones para un entero con signo de 16 bits.
              }
              else{
               //notificar que la cadena no representa un entero con signo de 16 bits.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsInt32(System.String)">
            <summary>
            Indica si la cadena representa un entero con signo de 32 bits.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un 
            entero con signo de 32 bits, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string number)
             {
              if (number.IsInt32())
              {
               //operaciones para un entero con signo de 32 bits.
              }
              else{
               //notificar que la cadena no representa un entero con signo de 32 bits.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsInt64(System.String)">
            <summary>
            Indica si la cadena representa un entero con signo de 64 bits.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un entero 
            con signo de 64 bits, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string number)
             {
              if(number.IsInt64())
              {
               //operaciones para un entero con signo de 64 bits.
              }
              else{
               //notificar que la cadena no representa un entero con signo de 64 bits.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsUInt16(System.String)">
            <summary>
            Indica si la cadena representa un entero sin signo de 16 bits.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un entero sin 
            signo de 16 bits, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string number)
             {
              if (number.IsUInt16())
              {
               //operaciones para un entero sin signo de 16 bits.
              }
              else{
               //notificar que la cadena no representa un entero sin signo de 16 bits.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsUInt32(System.String)">
            <summary>
            Indica si la cadena representa un entero sin signo de 32 bits.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un entero sin 
            signo de 32 bits, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string number)
             {
              if (number.IsUInt32())
              {
               //operaciones para un entero sin signo de 32 bits.
              }
              else{
               //notificar que la cadena no representa un entero sin signo 
               //de 32 bits.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.TypeValidations.IsUInt64(System.String)">
            <summary>
            Indica si la cadena representa un entero largo sin signo de 64 bits.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa un entero  
            sin signo de 64 bits, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckNumber(string number)
             {
              if(number.IsUInt64())
              {
               //operaciones para un entero largo sin signo de 64 bits.
              }
              else
              {
               //notificar que la cadena no representa un entero largo sin signo 
               //de 64 bits.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Validations.RangeValidations">
            <summary>
            Contiene métodos para validar que ciertos objetos se encuentren dentro de 
            los rangos especificados.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.RangeValidations.IsGreaterThan``1(``0,``0)">
            <summary>
            Indica si el valor de origen es mayor al valor especificado.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="value">Valor con el cual se va a comparar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> es mayor a 
            <paramref name="value"/>, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Check(int number, int value)
             {
              if(number.IsGreaterThan(value))
              {
               //operaciones cuando es mayor a value.
              }
              else
              {
               //notificar que es menor o igual.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.RangeValidations.IsGreaterThanOrEqual``1(``0,``0)">
            <summary>
            Indica si el valor de origen es mayor o igual al valor especificado.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="value">Valor con el cual se va a comparar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> es mayor o igual a 
            <paramref name="value"/>, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Check(int number, int value)
             {
              if(number.IsGreaterThanOrEqual(value))
              {
               //operaciones cuando es mayor o igual a value.
              }
              else
              {
               //notificar que es menor.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.RangeValidations.IsLessThan``1(``0,``0)">
            <summary>
            Indica si el valor de origen es menor al valor especificado.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="value">Valor con el cual se va a comparar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> es menor a 
            <paramref name="value"/>, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Check(int number, int value)
             {
              if(number.IsLessThan(value))
              {
               //operaciones cuando es menor a value.
              }
              else
              {
               //notificar que es mayor o igual.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.RangeValidations.IsLessThanOrEqual``1(``0,``0)">
            <summary>
            Indica si el valor de origen es menor o igual al valor especificado.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="value">Valor con el cual se va a comparar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> es menor o igual a 
            <paramref name="value"/>, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Check(int number, int value)
             {
              if(number.IsLessThanOrEqual(value))
              {
               //operaciones cuando es menor o igual a value.
              }
              else
              {
               //notificar que es mayor.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.RangeValidations.IsInRange``1(``0,``0,``0)">
            <summary>
            Indica si el valor de <paramref name="source"/> se encuentra entre el rango 
            especificado de manera inclusiva.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="minimumValue">Valor mínimo inclusivo.</param>
            <param name="maximumValue">Valor máximo inclusivo.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> se encuentra entre el 
            rango especificado de manera inclusiva, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System;
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckRange(DateTime date, DateTime minValue, DateTime maxValue)
             {
              if(date.IsInRange(minValue, maxValue))
              {
               //operaciones si esta dentro del rango.
              }
              else
              {
               //notificar que no esta dentro del rango.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.RangeValidations.IsInRangeExclusive``1(``0,``0,``0)">
            <summary>
            Indica si el valor de <paramref name="source"/> se encuentra entre el rango 
            especificado de manera exclusiva.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="minimumValue">Valor mínimo exclusivo.</param>
            <param name="maximumValue">Valor máximo exclusivo.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> se encuentra entre el 
            rango especificado de manera exclusiva, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System;
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckRange(DateTime date, DateTime minValue, DateTime maxValue)
             {
              if(date.IsInRangeExclusive(minValue, maxValue))
              {
               //operaciones si esta dentro del rango.
              }
              else
              {
               //notificar que no esta dentro del rango.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Extensions.EnumerableExtensions">
            <summary>
            Provee un conjunto de métodos estáticos que agregan funcionalidad para clases 
            con elementos enumerables.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.EnumerableExtensions.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Agrega los elementos de <paramref name="collection"/> al final de la colección 
            <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <typeparam name="T">
            El tipo de los elementos de la colección.
            </typeparam>
            <param name="source">
            Colección origen en donde se añadirán los elementos.
            </param>
            <param name="collection">
            <para>
            Colección cuyos elementos serán añadidos al final de <see cref="T:System.Collections.ObjectModel.Collection`1"/>. 
            </para>
            <para>
            La colección en si no puede ser <see langword="null"/> pero puede contener elementos 
            que sean <see langword="null"/> si {T} es un tipo por referencia.
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> o <paramref name="collection"/> son 
            <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.Collections.ObjectModel;
            using Cnbv.Sait.Utilities.Enumerable;
            </para>
            public class EntityTest
            {
              public EntityTest(int number, string name)
              {
                Number = number;
                Name = name;
              }
              public int Number
              {
                get;
                set;
              }
              public string Name
              {
                get;
                set;
              }
              public override string ToString()
              {
                return "[Number:" + Number + " Name:" + Name + "]";
              }
            }
            public class TestClass
            {
              public void Add()
              {
                Collection&lt;EntityTest&gt; target = new Collection&lt;EntityTest&gt;();
                target.Add(new EntityTest(25, "Marco"));
                target.Add(new EntityTest(60, "Luis"));
                target.Add(new EntityTest(40, "Alejandro"));
                Collection&lt;EntityTest&gt; newCollection = new Collection&lt;EntityTest&gt;();
                newCollection.AddRange(target);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.EnumerableExtensions.Find``1(System.Collections.ObjectModel.Collection{``0},System.String,System.Object)">
            <summary>
            Busca el índice del elemento que tiene con el valor especificado en la propiedad 
            especificada.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">Colección a ordenar.</param>
            <param name="propertyName">
            Nombre de la propiedad en donde se buscara.
            </param>
            <param name="key">Valor que se buscara en la propiedad.</param>
            <returns>
            El índice base cero del elemento que contiene el valor especificado en la propiedad 
            especificada, si no se encuentra un resultado es -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.Collections.ObjectModel;
            using Cnbv.Sait.Utilities.Enumerable;
            </para>
            public class EntityTest
            {
              public EntityTest(int number, string name)
              {
                Number = number;
                Name = name;
              }
              public int Number
              {
                get;
                set;
              }
              public string Name
              {
                get;
                set;
              }
              public override string ToString()
              {
                return "[Number:" + Number + " Name:" + Name + "]";
              }
            }
            public class TestClass
            {
              public void Work()
              {
                ObservableCollection&lt;EntityTest&gt; target = 
                  new ObservableCollection&lt;EntityTest&gt;();
                target.Add(new EntityTest(25, "Marco"));
                target.Add(new EntityTest(60, "Luis"));
                target.Add(new EntityTest(40, "Alejandro"));
                int index = target.Find("Name", "Luis");
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.EnumerableExtensions.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Crea un objeto <see cref="T:System.Collections.ObjectModel.Collection`1"/> tomando como 
            origen un objeto <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            El tipo de los elementos en el origen.
            </typeparam>
            <param name="source">
            El origen desde donde se creara el objeto <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </param>
            <returns>
            Una colección <see cref="T:System.Collections.ObjectModel.Collection`1"/> con los mismos elementos 
            que el objeto de entrada.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Enumerable;
            </para>
            public class EntityTest
            {
              public EntityTest(int number, string name)
              {
                Number = number;
                Name = name;
              }
              public int Number
              {
                get;
                set;
              }
              public string Name
              {
                get;
                set;
              }
              public override string ToString()
              {
                return "[Number:" + Number + " Name:" + Name + "]";
              }
            }
            public class TestClass
            {
              public void Convert()
              {
                EntityTest[] target = new EntityTest[5];
                target[0] = new EntityTest(25, "Marco");
                target[1] = new EntityTest(60, "Luis");
                target[2] = new EntityTest(40, "Alejandro");
                Collection&lt;EntityTest&gt; actual = target.ToCollection();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.EnumerableExtensions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Crea un objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> tomando como 
            origen un objeto <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            El tipo de los elementos en el origen.
            </typeparam>
            <param name="source">
            El origen desde donde se creara el objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </param>
            <returns>
            Una colección <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> 
            con los mismos elementos que el objeto de entrada.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Enumerable;
            </para>
            public class EntityTest
            {
              public EntityTest(int number, string name)
              {
                Number = number;
                Name = name;
              }
              public int Number
              {
                get;
                set;
              }
              public string Name
              {
                get;
                set;
              }
              public override string ToString()
              {
                return "[Number:" + Number + " Name:" + Name + "]";
              }
            }
            public class TestClass
            {
              public void Convert()
              {
                EntityTest[] target = new EntityTest[5];
                target[0] = new EntityTest(25, "Marco");
                target[1] = new EntityTest(60, "Luis");
                target[2] = new EntityTest(40, "Alejandro");
                ObservableCollection&lt;EntityTest&gt; actual = target.ToObservableCollection();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.EnumerableExtensions.FindCore``1(System.Collections.ObjectModel.Collection{``0},System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Busca el índice del elemento que tiene el descriptor de propiedad y valor 
            especificados.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">Colección a ordenar.</param>
            <param name="prop">
            Objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> en donde se buscara.
            </param>
            <param name="key">
            Valor que se buscara en la propiedad.
            </param>
            <returns>
            El índice base cero del elemento que contiene el descriptor de propiedad y contiene 
            el valor especificado.
            </returns>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Conversions.TypeConversions">
            <summary>
            Contiene métodos de extensión para convertir a objetos.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.FromBase64String(System.String)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a su equivalente 
            a un arreglo de 8 bits de enteros sin signo.
            </summary>
            <param name="source">
            Una cadena con una codificación de base 64.
            </param>
            <returns>
            La representación de <paramref name="source "/> a un arreglo de 8 bits de enteros sin signo.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>, <see cref="F:System.String.Empty"/> 
            o contiene solamente caracteres en blanco.
            </exception>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(string value)
              {
                byte[] array = value.FromBase64String();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.ToBase64String(System.Byte[])">
            <summary>
            Convierte un arreglo de 8 bits de enteros sin signo a su equivalente en 
            <see cref="T:System.String"/> en una codificación de base 64.
            </summary>
            <param name="array">
            Un arreglo de 8 bits de enteros sin signo.
            </param>
            <returns>
            La representación del contenido del arreglo en un objeto <see cref="T:System.String"/> con 
            una codificación de base 64.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="array"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(byte[] array)
              {
                string newValue = array.ToBase64String();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.ToGeneric``1(System.String)">
            <summary>
            Convierte el valor del objeto especificado a un valor equivalente de {T}.
            </summary>
            <typeparam name="T">El tipo del valor a regresar.</typeparam>
            <param name="source">
            Un objeto <see cref="T:System.String"/> con el valor a convertir.
            </param>
            <returns>
            Un valor equivalente de <paramref name="source"/> de tipo {T} cuando la 
            conversión se puede realizar, el valor por defecto de {T} en caso contrario.
            </returns>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(string value)
              {
                int newValue = value.ToGeneric&lt;int&gt;();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.ToMemoryStream(System.String)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un objeto 
            <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="source">
            Un objeto <see cref="T:System.String"/> con el valor a convertir.
            </param>
            <remarks>
            La codificación por defecto es <see cref="P:System.Text.Encoding.Unicode"/>.
            </remarks>
            <returns>
            Un objeto <see cref="T:System.IO.MemoryStream"/> equivalente a <paramref name="source"/> si 
            <paramref name="source"/> no es <see langword="null"/> o <see cref="F:System.String.Empty"/>, 
            <see langword="null"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            using System.IO;
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(string value)
              {
                MemoryStream newValue = value.ToMemoryStream();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.ToMemoryStream(System.String,System.Text.Encoding)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un objeto 
            <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="source">
            Un objeto <see cref="T:System.String"/> con el valor a convertir.
            </param>
            <param name="encoding">Codificación a usar para convertir la cadena.</param>
            <returns>
            Un objeto <see cref="T:System.IO.MemoryStream"/> equivalente a <paramref name="source"/> si 
            <paramref name="source"/> no es <see langword="null"/> o <see cref="F:System.String.Empty"/>, 
            <see langword="null"/> en caso contrario.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="encoding"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            using System.IO;
            using System.Text;
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(string value)
              {
                MemoryStream newValue = value.ToMemoryStream(Encoding.UTF8);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.ToSecureString(System.String)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un objeto 
            <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="source">
            Un objeto <see cref="T:System.String"/> con el valor a convertir.
            </param>
            <returns>
            Un objeto <see cref="T:System.Security.SecureString"/> equivalente a <paramref name="source"/> si 
            <paramref name="source"/> no es <see langword="null"/> o <see cref="F:System.String.Empty"/>, 
            <see langword="null"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            using System.Security;
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass {
              public void Convert(string value)
              {
                SecureString newValue = value.ToSecureString();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.ToStringInvariant``1(``0)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un objeto 
            <see cref="T:System.String"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>.
            </param>
            <returns>
            Un objeto <see cref="T:System.String"/> equivalente al valor de <paramref name="source"/>. O 
            <see cref="F:System.String.Empty"/> si <paramref name="source"/> es <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(object data)
              {
                string newValue = data.ToStringInvariant();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.ToStringInvariant(System.DateTime,System.String)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un objeto 
            <see cref="T:System.String"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <param name="source">
            Un objeto <see cref="T:System.DateTime"/> cuyo valor se convertira a  <see cref="T:System.String"/>.
            </param>
            <param name="format">
            Un objeto <see cref="T:System.String"/> que representa un formato de fecha.
            </param>
            <returns>
            Un objeto <see cref="T:System.String"/> equivalente al valor de <paramref name="source"/> 
            como se especifica en <paramref name="format"/>.
            </returns>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(DateTime data)
              {
                string newValue = data.ToStringInvariant("yyyyMMdd");
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.TypeConversions.ToStringInvariant(System.Decimal,System.String)">
            <summary>
            Convierte el valor especificado en <paramref name="source"/> a un objeto 
            <see cref="T:System.String"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <param name="source">
            Un objeto <see cref="T:System.Decimal"/> cuyo valor se convertira a  <see cref="T:System.String"/>.
            </param>
            <param name="format">
            Un objeto <see cref="T:System.String"/> que representa un formato de número.
            </param>
            <returns>
            Un objeto <see cref="T:System.String"/> equivalente al valor de <paramref name="source"/> 
            como se especifica en <paramref name="format"/>.
            </returns>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(decimal data)
              {
                string newValue = data.ToStringInvariant("C");
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.NetResource">
            <summary>
            Estructura con los datos necesarios para realizar una conexión a un recurso 
            remoto compartido.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.NetResource.Scope">
            <summary>
            El alcance de la enumeración.
            </summary>
            <value>El alcance de la enumeración.</value>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.NetResource.Type">
            <summary>
            El tipo de recurso. 
            </summary>
            <value>El tipo de recurso.</value>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.NetResource.DisplayType">
            <summary>
            Indica como se desplegaran los objetos de la red usando una interfaz de 
            navegación.
            </summary>
            <value>
            Un valor que indica como se desplegaran los objetos de la red usando una 
            interfaz de navegación.
            </value>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.NetResource.Usage">
            <summary>
            Indica como será usando el recurso. Este miembro solo se toma en cuenta si 
            <see cref="F:Cnbv.Sait.Utilities.Interop.NetResource.Scope"/> es igual a <see cref="F:Cnbv.Sait.Utilities.Interop.ResourceScope.GlobalNet"/>.
            </summary>
            <value>Un valor que indica como será usando el recurso.</value>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.NetResource.LocalName">
            <summary>
            Si <see cref="F:Cnbv.Sait.Utilities.Interop.NetResource.Scope"/> es igual a <see cref="F:Cnbv.Sait.Utilities.Interop.ResourceScope.Connected"/> 
            o <see cref="F:Cnbv.Sait.Utilities.Interop.ResourceScope.Remembered"/> este miembro es un puntero a una cadena de 
            caracteres terminada en nulo que especifica el nombre del dispositivo local. Este 
            miembro es <see langword="null"/> si la conexión no usa un dispositivo.
            </summary>
            <value>Una cadena que especifica el nombre del dispositivo local.</value>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.NetResource.RemoteName">
            <summary>
            Si la entrada es un recurso de red, este miembro es es un puntero a una cadena de 
            caracteres terminada en nulo que especifica el nombre del recurso compartido. Si la 
            entrada es una conexión persistente este miembro apunta a un nombre de red asociado 
            con el nombre apuntado por <see cref="F:Cnbv.Sait.Utilities.Interop.NetResource.LocalName"/>.
            La cadena debe seguir las convenciones de nombres del proveedor.
            </summary>
            <value>Una cadena que especifica el nombre del recurso compartido.</value>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.NetResource.Comment">
            <summary>
            Un puntero a una cadena terminada por nulo que contiene un comentario hecho 
            por el proveedor de la red.
            </summary>
            <value>
            Una cadena que especifica un comentario hecho por el proveedor de la red.
            </value>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.NetResource.Provider">
            <summary>
            Un puntero a una cadena terminada por nulo que contiene el nombre del proveedor que 
            posee el recurso. Este miembro puede ser <see langword="null"/> si el nombre del 
            proveedor es desconocido. Para obtener el nombre del proveedor use la función 
            <c>WNetGetProviderName</c>.
            </summary>
            <value>
            Una cadena que especifica el nombre del proveedor que posee el recurso.
            </value>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NetResource.op_Equality(Cnbv.Sait.Utilities.Interop.NetResource,Cnbv.Sait.Utilities.Interop.NetResource)">
            <summary>
            Compara dos instancias de <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> para determinar 
            si son iguales.
            </summary>
            <param name="resource1">
            Un objeto <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> para comparar con <paramref name="resource2"/>.
            </param>
            <param name="resource2">
            Un objeto <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> para comparar con <paramref name="resource1"/>.
            </param>
            <returns>
            <see langword="true"/> si las dos instancias son iguales, 
            <see langword="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NetResource.op_Inequality(Cnbv.Sait.Utilities.Interop.NetResource,Cnbv.Sait.Utilities.Interop.NetResource)">
            <summary>
            Compara dos instancias de <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> 
            para determinar si son distintas.
            </summary>
            <param name="resource1">
            Un objeto <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> para comparar con <paramref name="resource2"/>.
            </param>
            <param name="resource2">
            Un objeto <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> para comparar con <paramref name="resource1"/>.
            </param>
            <returns>
            <see langword="true"/> si las dos instancias son distintas, 
            <see langword="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NetResource.ToString">
            <summary>
            Regresa un objeto <see cref="T:System.String"/> que representa al objeto 
            <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> actual.
            </summary>
            <returns>
            Un objeto <see cref="T:System.String"/> que representa al objeto 
            <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> actual.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NetResource.GetHashCode">
            <summary>
            Regresa el código hash de esta instancia.
            </summary>
            <returns>Un <see cref="T:System.Int32"/> que representa el código hash.</returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NetResource.Equals(System.Object)">
            <summary>
            Determina si el parámetro <see cref="T:System.Object"/> es igual al objeto actual.
            </summary>
            <overloads>
            Determina si el parámetro es igual al objeto actual.
            </overloads>
            <param name="obj">
            Un objeto <see cref="T:System.Object"/> a comparar con el objeto actual. 
            </param>
            <exception cref="T:System.NullReferenceException">
            Cuando esta instancia es <see langword="null"/>.
            </exception>
            <returns>
            <see langword="true"/> si <see cref="T:System.Object"/> es igual al objeto actual, 
            <see langword="false"/> en 
            caso contrario.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.NetResource.Equals(Cnbv.Sait.Utilities.Interop.NetResource)">
            <summary>
            Compara la estructura <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> especificada a la instancia 
            actual para determinar si son iguales.
            </summary>
            <param name="other">
            Un objeto <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> para comparar con esta instancia.
            </param>
            <exception cref="T:System.NullReferenceException">
            Cuando esta instancia es <see langword="null"/>.
            </exception>
            <returns>
            <see langword="true"/> si el objeto <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> 
            especificado tiene los mismos valores que esta instancia, 
            <see langword="false"/> en caso contrario.
            </returns>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.ResourceDisplayType">
            <summary>
            Se usa por el proveedor para indicar a la interfaz de usuario como representar 
            al recurso.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceDisplayType.Generic">
            <summary>
            El tipo de recurso no se pudo especificar. Este valor es usado por proveedores que no 
            especifican el tipo de recurso.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceDisplayType.Domain">
            <summary>
            El recurso es una colección de servidores.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceDisplayType.Server">
            <summary>
            El recurso es un servidor.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceDisplayType.Share">
            <summary>
            El recurso es un recurso compartido.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceDisplayType.Network">
            <summary>
            El recurso es un proveedor de red.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceDisplayType.Directory">
            <summary>
            El recurso es un directorio.
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.ResourceUsages">
            <summary>
            Indica como se puede enumerar la información acerca del recurso. Es valido solo si 
            <see cref="T:Cnbv.Sait.Utilities.Interop.ResourceScope"/> es igual a <see cref="F:Cnbv.Sait.Utilities.Interop.ResourceScope.GlobalNet"/>.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceUsages.Connectable">
            <summary>
            Se puede conectar al recurso. Si <see cref="T:Cnbv.Sait.Utilities.Interop.ResourceType"/> es igual a 
            <see cref="F:Cnbv.Sait.Utilities.Interop.ResourceType.Disk"/> se pueden usar las llamadas a las librerías del 
            sistema para enumerar archivos y directorios que el recurso contenga.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceUsages.Container">
            <summary>
            El recurso es un contenedor para otros recursos. El contenedor puede estar vacío.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceUsages.All">
            <summary>
            Todas las banderas de la enumeración.
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.IO.FileLog">
            <summary>
            Permite escribir eventos en archivos de texto.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.IO;
            </para>
            public class TestClass
            {
              public void WriteLog()
              {
                string path = "c:\\log.txt";
                using(FileLog log = new FileLog(path))
                {
                  log.Open();
                  string action = "Actualizacion de datos";
                  log.BeginAction(action);
                  log.WriteEntry("Operacion 1 finalizada");
                  log.WriteEntry("Salvando", "Operacion 2 finalizada");
                  log.WriteEntry("Salvando", "Operacion 3 finalizada");
                  log.WriteEntry("Cerrando", "Operacion 4 finalizada");
                  log.EndAction(action);
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.FileLog.path">
            <summary>
            Almacena la ruta completa al archivo a leer.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.FileLog.disposed">
            <summary>
            Almacena un valor indicando si ya se liberaron los recursos de la clase.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.FileLog.streamWriter">
            <summary>
            Almacena el objeto para leer el contenido del archivo.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.FileLog.opened">
            <summary>
            Almacena un valor indicando si ya esta abierto el archivo.
            </summary>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.#ctor">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/>.
            </summary>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.#ctor(System.String)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/> 
            especificando la ruta completa del archivo a utilizar.
            </summary>
            <param name="path">
            La ruta completa al archivo en donde se escribirán los eventos.
            </param>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.ToString">
            <summary>
            Regresa un objeto <see cref="T:System.String"/> que representa al objeto 
            <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/> actual.
            </summary>
            <returns>
            Un objeto <see cref="T:System.String"/> que representa al objeto 
            <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/> actual.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.Open">
            <summary>
            Abre el archivo especificado en la propiedad <see cref="P:Cnbv.Sait.Utilities.IO.FileLog.Path"/> 
            para escribir las entradas de los eventos.
            </summary>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cuando <see cref="P:Cnbv.Sait.Utilities.IO.FileLog.Path"/> es <see langword="null"/>, 
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco. O cuando 
            ya se abrió el archivo especificado.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.BeginAction(System.String)">
            <summary>
            Escribe una entrada en el archivo de texto indicando que se ha iniciado una acción.
            </summary>
            <param name="action">Nombre de la acción.</param>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cuando no se ha abierto el archivo en donde se escribirá la acción.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.WriteEntry(System.String)">
            <summary>
            Escribe una entrada en el archivo de texto con el mensaje especificado.
            </summary>
            <overloads>Escribe una entrada en el archivo de texto.</overloads>
            <param name="message">Mensaje a escribir en el archivo de texto.</param>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cuando no se ha abierto el archivo en donde se escribirá el mensaje.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.WriteEntry(System.String,System.String)">
            <summary>
            Escribe una entrada en el archivo de texto con la categoría y mensaje especificado.
            </summary>
            <param name="category">Nombre de la categoría.</param>
            <param name="message">Mensaje a escribir en el archivo de texto.</param>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cuando no se ha abierto el archivo en donde se escribirá el mensaje.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.EndAction(System.String)">
            <summary>
            Escribe una entrada en el archivo de texto indicando que se ha finalizado una acción.
            </summary>
            <param name="action">Nombre de la acción.</param>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.FileLog"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cuando no se ha abierto el archivo en donde se escribirá la acción.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.Dispose">
            <summary>
            Libera todos los recursos utilizados por la clase.
            </summary>
            <overloads>Libera los recursos utilizados por la clase.</overloads>
            <remarks>
            Ejecute <c>Dispose</c> cuando termine de utilizar la clase. Este método deja la 
            clase en un estado inservible. Después de ejecutar <c>Dispose</c> usted debe 
            liberar todas las referencias a la clase para que el Colector de Basura pueda 
            reclamar la memoria que la clase estaba ocupando.
            <note type="caution">
            Siempre ejecute <c>Dispose</c> antes de liberar la ultima referencia a la clase. 
            De otra manera los recursos que están siendo usados por la clase no serán 
            liberados de manera determinista.
            </note>
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.FileLog.Dispose(System.Boolean)">
            <summary>
            Libera los recursos no administrados utilizados por la clase y opcionalmente libera 
            los recursos administrados.
            </summary>
            <param name="disposing">
            <see langword="true"/> para liberar los recursos administrados y no administrados, 
            <see langword="false"/> para liberar solo los recursos no administrados.
            </param>
            <remarks>
            Este método es llamado por el método público <c>Dispose</c>. 
            </remarks>
        </member>
        <member name="P:Cnbv.Sait.Utilities.IO.FileLog.Path">
            <summary>
            Regresa o asigna la ruta completa al archivo en donde se escribirán los eventos.
            </summary>
            <value>
            La ruta completa al archivo en donde se escribirán los eventos.
            </value>
        </member>
        <member name="P:Cnbv.Sait.Utilities.IO.FileLog.Now">
            <summary>
            Regresa la fecha y hora actual con un formato para agregarla a la bitácora.
            </summary>
            <value>
            La fecha y hora actual con un formato para agregarla a la bitácora.
            </value>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Extensions.StringExtensions">
            <summary>
            Provee un conjunto de métodos estáticos que agregan funcionalidad para 
            <see cref="T:System.String"/>.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.FormatInvariant(System.String,System.Object[])">
            <summary>
            Reemplaza el formato especificado en <paramref name="source"/> con el equivalente 
            en texto de los objetos en el arreglo especificado.
            </summary>
            <param name="source">La cadena con el formato compuesto.</param>
            <param name="args">
            Un arreglo de <see cref="T:System.Object"/> que contiene cero o mas objetos a formatear.
            </param>
            <returns>
            Una cadena con una copia del formato en el cual los elementos han sido reemplazados 
            por objetos <see cref="T:System.String"/> correspondientes a los elementos del arreglo.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work()
              {
                string format = "{0}/{1}";
                string formated = format.FormatInvariant(2000, 5000); // resultado es "2000/5000"
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indica si el objeto <see cref="T:System.String"/> es <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> es 
            <see langword="null"/> o <see cref="F:System.String.Empty"/>, 
            <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work(string content)
              {
                if(content.IsNullOrEmpty())
                {
                  //operaciones para cuando la cadena es nula o vacía.
                }
                else
                {
                  //operaciones para cuando la cadena tiene valor.
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indica si el objeto <see cref="T:System.String"/> es <see langword="null"/>, 
            <see cref="F:System.String.Empty"/> o contiene caracteres en blanco.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> es 
            <see langword="null"/>, <see cref="F:System.String.Empty"/> o contiene caracteres 
            en blanco, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
             public void Work(string content)
             {
              if(content.IsNullOrWhiteSpace())
              {
               //operaciones para cuando la cadena es nula, vacía 
               //o caracteres en blanco.
              }
              else
              {
               //operaciones para cuando la cadena tiene valor.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.ToConsole(System.String)">
            <summary>
            Escribe la cadena a la consola de salida estándar.
            </summary>
            <overloads>
            Escribe la cadena a la consola de salida estándar.
            </overloads>
            <param name="source">
            La cadena a escribir en la consola de salida estándar.
            </param>
            <remarks>
            Usa el método <see cref="M:System.Console.WriteLine(System.String)"/>
            </remarks>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
             public void Work(string content)
             {
              content.ToConsole(); // escribe en la consola
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.ToConsole(System.String,System.Object[])">
            <summary>
            Escribe la representación en cadena del arreglo de objetos a la consola 
            de salida estándar.
            </summary>
            <param name="source">La cadena con el formato compuesto.</param>
            <param name="args">
            Un arreglo de <see cref="T:System.Object"/> que contiene cero o mas objetos a formatear.
            </param>
            <remarks>
            Usa el método <see cref="M:System.Console.WriteLine(System.String,System.Object[])"/>
            </remarks>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
             public void Work()
             {
              string format = "{0}/{1}";
              format.ToConsole(2000, 5000); //escribe en la consola 2000/5000
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.ToTrace(System.String)">
            <summary>
            Escribe la cadena a la consola de salida para depurar.
            </summary>
            <overloads>
            Escribe la cadena a la consola de salida para depurar.
            </overloads>
            <param name="source">
            La cadena a escribir en la consola de salida para depurar.
            </param>
            <remarks>
            Usa el método <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/>
            </remarks>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
             public void Work(string content)
             {
              content.ToTrace(); // escribe en la consola
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.ToTrace(System.String,System.Object[])">
            <summary>
            Escribe la representación en cadena del arreglo de objetos a la consola 
            de salida para depurar.
            </summary>
            <param name="source">La cadena con el formato compuesto.</param>
            <param name="args">
            Un arreglo de <see cref="T:System.Object"/> que contiene cero o mas objetos a formatear.
            </param>
            <remarks>
            Usa el método <see cref="M:System.Console.WriteLine(System.String)"/>
            </remarks>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
             public void Work()
             {
              string format = "{0}/{1}";
              format.ToTrace(2000, 5000); //escribe en la consola 2000/5000 
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.TrimToMaxLength(System.String,System.Int32)">
            <summary>
            Corta la cadena al tamaño especificado.
            </summary>
            <param name="source">
            La cadena original.
            </param>
            <param name="maxLength">Tamaño máximo de la cadena.</param>
            <returns>
            Si la cadena es <see langword="null"/> o su tamaño es menor a
            <paramref name="maxLength"/> regresa la cadena original, en caso contrario 
            regresa la cadena recortada con el sufijo especificado al final.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
             public void Work()
             {
              string content = "esta es una cadena larga";
              //el resultado es "esta"
              string newContent = content.TrimToMaxLength(4); 
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.StringExtensions.TrimToMaxLength(System.String,System.Int32,System.String)">
            <summary>
            Corta la cadena al tamaño especificado y agrega el sufijo especificado 
            al final de la misma.
            </summary>
            <param name="source">
            La cadena original.
            </param>
            <param name="maxLength">Tamaño máximo de la cadena.</param>
            <param name="suffix">Sufijo a agregar al final.</param>
            <returns>
            Si la cadena es <see langword="null"/> o su tamaño es menor a
            <paramref name="maxLength"/> regresa la cadena original, en caso contrario 
            regresa la cadena recortada con el sufijo especificado al final.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
             public void Work()
             {
              string content = "esta es una cadena larga";
              // el resultado es "esta..."
              string newContent = content.TrimToMaxLength(4, "..."); 
             }
            }
            </code>
            </example>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Extensions.GenericExtensions">
            <summary>
            Provee un conjunto de métodos estáticos que agregan funcionalidad para 
            objetos genéricos.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.GenericExtensions.IsDefault``1(``0)">
            <summary>
            Verifica si el valor de un objeto es igual al valor por defecto de su tipo.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El objeto a verificar.</param>
            <returns>
            <see langword="true"/> si el valor del objeto es igual al valor por defecto de {T}, 
            <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work(string result)
              {
                if(result.IsDefault())
                {
                  //operaciones cuando el valor es el igual al de defecto
                }
                else
                {
                  //operaciones para cuando el valor no es el igual al de defecto
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.GenericExtensions.IsNotDefault``1(``0)">
            <summary>
            Verifica si el valor de un objeto no es igual al valor por defecto de su tipo.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El objeto a verificar.</param>
            <returns>
            <see langword="true"/> si el valor del objeto no es igual al valor por defecto de 
            {T}, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work(string result)
              {
                if(result.IsNotDefault())
                {
                  //operaciones cuando el valor no es el igual al de defecto
                }
                else
                {
                  //operaciones para cuando el valor es el igual al de defecto
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.GenericExtensions.IsNotNull``1(``0)">
            <summary>
            Verifica si un objeto no es <see langword="null"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El objeto a verificar.</param>
            <returns>
            <see langword="true"/> si el objeto no es <see langword="null"/>, 
            <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work(string result)
              {
                if(result.IsNotNull())
                {
                  //operaciones cuando no es nulo
                }
                else
                {
                  //operaciones para cuando es nulo
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.GenericExtensions.IsNotNullable``1(``0)">
            <summary>
            Verifica si el valor de un objeto no puede ser nulo.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El objeto a verificar.</param>
            <returns>
            <see langword="true"/> si el valor del objeto no puede ser nulo, 
            <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work(string result)
              {
                if(result.IsNotNullable())
                {
                  //operaciones cuando el valor del objeto no puede ser nulo
                }
                else
                {
                  //operaciones cuando el valor del objeto puede ser nulo
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.GenericExtensions.IsNull``1(``0)">
            <summary>
            Verifica si un objeto es <see langword="null"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El objeto a verificar.</param>
            <returns>
            <see langword="true"/> si el objeto es <see langword="null"/>, 
            <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work(string result)
              {
                if(result.IsNull())
                {
                  //operaciones cuando no es nulo
                }
                else
                {
                  //operaciones para cuando es nulo
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.GenericExtensions.IsNullable``1(``0)">
            <summary>
            Verifica si el valor de un objeto puede ser nulo.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El objeto a verificar.</param>
            <returns>
            <see langword="true"/> si el valor del objeto puede ser nulo, 
            <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work(string result)
              {
                if(result.IsNullable())
                {
                  //operaciones cuando el valor del objeto puede ser nulo
                }
                else
                {
                  //operaciones cuando el valor del objeto no puede ser nulo
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.ResourceScope">
            <summary>
            Indica el alcance del recurso.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceScope.Connected">
            <summary>
            Conexiones actuales a recursos de red.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceScope.GlobalNet">
            <summary>
            Todos los recursos de red, estos pueden estar o no conectados.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ResourceScope.Remembered">
            <summary>
            Los recursos de red asociados con el contexto de red del usuario actual. Esta 
            opción depende del proveedor seleccionado.
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.IO.NetworkDrive">
            <summary>
            Permite conectarse y desconectarse de recursos de red compartidos.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.IO;
            </para>
            public class TestClass
            {
              public void Connect()
              {
                //obtenemos una unidad libre en la computadora actual
                string driveLetter = NetworkDrive.FindFreeDrive();
                string path = "\\servidor\recurso";
                //opcional, el valor por defecto es ConnectionOptions.None
                ConnectionOptions options = ConnectionOptions.None;
                NetworkDrive target = new NetworkDrive(driveLetter, path);
                //nos conectamos al recurso compartido remoto
                target.MapDrive("usuario", "contraseña", options);
                //la clase DriveInfo pertenece al Framework de .Net, en este caso la usamos 
                //para validar que la unidad este lista para trabajar con ella
                DriveInfo drive = new DriveInfo(driveLetter);
                if(drive.IsReady)
                {
                  //realizar operaciones
                }
                //nos desconectamos
                target.DisconnectDrive();
              }
            }
            </code>
            </example>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.NetworkDrive.LetterA">
            <summary>
            Representa la letra A en código ASCII.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.NetworkDrive.LetterZ">
            <summary>
            Representa la letra Z en código ASCII.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.NetworkDrive.Colon">
            <summary>
            Representa los dos puntos en código ASCII.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.NetworkDrive.Slash">
            <summary>
            Representa la diagonal inversa en código ASCII.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.NetworkDrive.netResource">
            <summary>
            Almacena la estructura usada para conectarse a las unidades de red.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.NetworkDrive.drive">
            <summary>
            Almacena la letra de la unidad en donde se hará la conexión.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.IO.NetworkDrive.path">
            <summary>
            Almacena la ruta al recurso compartido a usar para conectarse.
            </summary>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.#ctor">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </summary>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.#ctor(System.String)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/> especificando 
            el nombre de la unidad.
            </summary>
            <param name="drive">Unidad que se usara para la operación.</param>
            <remarks>
            El formato de la unidad debe ser 'A:'.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.#ctor(System.String,System.String)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/> 
            especificando el nombre de la unidad y la ruta del recurso compartido.
            </summary>
            <param name="drive">Unidad que se usara para la operación.</param>
            <param name="path">Ruta del recurso compartido.</param>
            <remarks>
            <para>
            El formato de la unidad debe ser 'A:'.
            </para>
            <para>
            El formato de la ruta del recurso compartido debe ser '\\servidor\recurso'.
            </para>
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.FindFreeDrive">
            <summary>
            Regresa una cadena que representa la primera unidad libre encontrada.
            </summary>
            <returns>
            Un objeto <see cref="T:System.String"/> que representa la primera unidad libre 
            encontrada, si no existen unidades libres regresa una cadena vacía.
            </returns>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.ToString">
            <summary>
            Regresa un objeto <see cref="T:System.String"/> que representa al objeto 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/> actual.
            </summary>
            <returns>
            Un objeto <see cref="T:System.String"/> que representa al objeto 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/> actual.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.MapDrive">
            <summary>
            Se conecta a un recurso de red.
            </summary>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cuando <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> es <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.MapDrive(Cnbv.Sait.Utilities.Interop.ConnectionOptions)">
            <summary>
            Se conecta a un recurso de red usando las opciones para realizar la conexión.
            </summary>
            <param name="options">
            Un conjunto de valores de la enumeración 
            <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/> que representan 
            las opciones para realizar la conexión.
            </param>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="options"/> no es un valor valido dentro de la 
            enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cuando <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> es <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.MapDrive(System.String,System.String)">
            <summary>
            Se conecta a un recurso de red usando el ID del usuario y la contraseña 
            proporcionados.
            </summary>
            <param name="userId">
            Una cadena que especifica el ID del usuario a usar para realizar la conexión. 
            Si <paramref name="userId"/> es <see langword="null"/> la función usa el ID del 
            usuario que este ejecutando el proceso. <paramref name="userId"/> se usa cuando los 
            usuarios se desean conectarse a un recurso de red para el cual se les ha 
            asignado una cuenta distinta a su cuenta normal. El ID del usuario representa 
            un contexto de seguridad que puede ser especifico a un proveedor de red. En 
            Windows Me/98/95: este parámetro debe de ser <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </param>
            <param name="password">
            Una cadena que especifica la contraseña a usar para realizar la conexión. Si 
            <paramref name="password"/> es <see langword="null"/> la función usa la contraseña 
            asociada con el usuario indicado por <paramref name="userId"/>. Si 
            <paramref name="password"/> es una cadena vacía la función no usa una 
            contraseña. Si la conexión falla por que se uso una contraseña invalida y la 
            bandera ConnectInteractive de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/> 
            esta activa la función despliega una ventana de dialogo preguntándole al usuario 
            por la contraseña. En Windows Me/98/95: este parámetro debe de ser 
            <see langword="null"/> o <see cref="F:System.String.Empty"/>.
            </param>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cuando <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> es <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.MapDrive(System.String,System.String,Cnbv.Sait.Utilities.Interop.ConnectionOptions)">
            <summary>
            Se conecta a un recurso de red usando las opciones para realizar la conexión,  
            el ID del usuario y la contraseña proporcionados.
            </summary>
            <param name="userId">
            Una cadena que especifica el ID del usuario a usar para realizar la conexión. 
            Si <paramref name="userId"/> es <see langword="null"/> la función usa el ID del 
            usuario que este ejecutando el proceso. <paramref name="userId"/> se usa cuando los 
            usuarios se desean conectarse a un recurso de red para el cual se les ha 
            asignado una cuenta distinta a su cuenta normal. El ID del usuario representa 
            un contexto de seguridad que puede ser especifico a un proveedor de red. En 
            Windows Me/98/95: este parámetro debe de ser <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </param>
            <param name="password">
            Una cadena que especifica la contraseña a usar para realizar la conexión. Si 
            <paramref name="password"/> es <see langword="null"/> la función usa la contraseña 
            asociada con el usuario indicado por <paramref name="userId"/>. Si 
            <paramref name="password"/> es una cadena vacía la función no usa una 
            contraseña. Si la conexión falla por que se uso una contraseña invalida y la 
            bandera ConnectInteractive de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/> 
            esta activa la función despliega una ventana de dialogo preguntándole al usuario 
            por la contraseña. En Windows Me/98/95: este parámetro debe de ser 
            <see langword="null"/> o <see cref="F:System.String.Empty"/>.
            </param>
            <param name="options">
            Un conjunto de valores de la enumeración 
            <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/> que representan 
            las opciones para realizar la conexión.
            </param>
            <remarks>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="options"/> no es un valor valido dentro de la 
            enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cuando <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> es <see langword="null"/>,  
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.DisconnectDrive">
            <summary>
            Cancela una conexión a un recurso de red. También se puede usar la función 
            para eliminar conexiones en cache las cuales no están actualmente conectadas.
            </summary>
            <remarks>
            <para>
            Si la propiedad <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> tiene un valor se intentara 
            desconectar el dispositivo local especificado. Si <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> 
            no tiene ningún valor se intentara desconectar usando la propiedad 
            <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/>, si <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> especifica 
            un recurso de red remoto se cancelaran todas las conexiones que no tengan asociadas 
            un dispositivo local. 
            </para>
            <para>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.DisconnectDrive(Cnbv.Sait.Utilities.Interop.DisconnectionType)">
            <summary>
            Cancela una conexión a un recurso de red usando el tipo de desconexión 
            especificado. También se puede usar la función para eliminar conexiones en 
            cache las cuales no están actualmente conectadas. 
            </summary>
            <param name="type">
            Un valor de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.DisconnectionType"/> que representa 
            la opción para realizar la desconexión.
            </param>
            <remarks>
            <para>
            Si la propiedad <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> tiene un valor se intentara 
            desconectar el dispositivo local especificado. Si <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> 
            no tiene ningún valor se intentara desconectar usando la propiedad 
            <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/>, si <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> especifica 
            un recurso de red remoto se cancelaran todas las conexiones que no tengan asociadas 
            un dispositivo local.
            </para>
            <para>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="type"/> no es un valor valido dentro de la 
            enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.DisconnectionType"/>.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.DisconnectDrive(System.Boolean)">
            <summary>
            Cancela una conexión a un recurso de red usando el valor especificado para 
            forzar o no la desconexión También se puede usar la función para eliminar 
            conexiones en cache las cuales no están actualmente conectadas.
            </summary>
            <param name="force">
            Especifica si la desconexión debe de ocurrir aun si hay archivos abiertos o 
            trabajos pendientes en la conexión. Si este parámetro es falso la función 
            falla si existen archivos abiertos o trabajos pendientes.
            </param>
            <remarks>
            <para>
            Si la propiedad <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> tiene un valor se intentara 
            desconectar el dispositivo local especificado. Si <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> 
            no tiene ningún valor se intentara desconectar usando la propiedad 
            <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/>, si <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> especifica 
            un recurso de red remoto se cancelaran todas las conexiones que no tengan asociadas 
            un dispositivo local.
            </para>
            <para>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.DisconnectDrive(Cnbv.Sait.Utilities.Interop.DisconnectionType,System.Boolean)">
            <summary>
            Cancela una conexión a un recurso de red usando el tipo de desconexión 
            especificado y el valor especificado para forzar o no la desconexión. 
            También se puede usar la función para eliminar conexiones en cache las 
            cuales no están actualmente conectadas. 
            </summary>
            <param name="type">
            Un valor de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.DisconnectionType"/> que representa la 
            opción para realizar la desconexión.
            </param>
            <param name="force">
            Especifica si la desconexión debe de ocurrir aun si hay archivos abiertos o 
            trabajos pendientes en la conexión. Si este parámetro es falso la función 
            falla si existen archivos abiertos o trabajos pendientes.
            </param>
            <remarks>
            <para>
            Si la propiedad <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> tiene un valor se intentara 
            desconectar el dispositivo local especificado. Si <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> 
            no tiene ningún valor se intentara desconectar usando la propiedad 
            <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/>, si <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> especifica 
            un recurso de red remoto se cancelaran todas las conexiones que no tengan asociadas 
            un dispositivo local.
            </para>
            <para>
            Para ver un ejemplo del uso favor de ver la documentación de 
            <see cref="T:Cnbv.Sait.Utilities.IO.NetworkDrive"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="type"/> no es un valor valido dentro de la 
            enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.DisconnectionType"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cuando <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/> y <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> son 
            <see langword="null"/> o <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.CreateDefaultResource">
            <summary>
            Crea una estructura <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.NetResource"/> con los valores por defecto.
            </summary>
            <returns>
            Estructura <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.NetResource"/> con los valores por defecto.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.IO.NetworkDrive.GetCurrentDrive(System.Byte)">
            <summary>
            Regresa una cadena con el formato de las unidades locales.
            </summary>
            <param name="letter">
            Representación de la letra en código ASCII.
            </param>
            <returns>
            Una cadena en formato 'A:\' que representa una unidad local.
            </returns>
        </member>
        <member name="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive">
            <summary>
            Regresa o asigna la letra de la unidad en donde se hará la conexión.
            </summary>
            <value>
            La letra de la unidad en donde se hará la conexión.
            </value>
            <remarks>
            El formato de la unidad debe ser 'A:'.
            </remarks>
        </member>
        <member name="P:Cnbv.Sait.Utilities.IO.NetworkDrive.NetResource">
            <summary>
            Regresa la estructura usada para conectarse a las unidades de red.
            </summary>
            <value>
            La estructura <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.NetResource"/> usada para 
            conectarse a las unidades de red.
            </value>
        </member>
        <member name="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path">
            <summary>
            Regresa o asigna la ruta al recurso compartido a usar para conectarse.
            </summary>
            <value>
            La ruta al recurso compartido a usar para conectarse.
            </value>
            <remarks>
            El formato debe ser '\\servidor\recurso'.
            </remarks>
        </member>
        <member name="P:Cnbv.Sait.Utilities.IO.NetworkDrive.DisconnectPath">
            <summary>
            Regresa la ruta que tenga un valor valido para hacer la desconexión.
            </summary>
            <value>
            La primer ruta que encuentre con un valor valido 
            (<see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Drive"/> o <see cref="P:Cnbv.Sait.Utilities.IO.NetworkDrive.Path"/>).
            </value>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions">
            <summary>
            Provee un conjunto de métodos estáticos que agregan funcionalidad para 
            <see cref="T:System.Type"/>.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Regresa el atributo especificado por {T} si existe.
            </summary>
            <typeparam name="T">El tipo de {T}.</typeparam>
            <param name="source">
            Objeto <see cref="T:System.Reflection.MemberInfo"/> en donde se buscara el atributo.
            </param>
            <returns>
            Un atributo si <see cref="T:System.Reflection.MemberInfo"/> usa dicho atributo, <see langword="null"/> 
            en caso contrario.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void DoWork(Type type)
              {
                SerializableAttribute value = type.GetAttribute&lt;SerializableAttribute&gt;();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.GetPropertyDescriptor(System.Type,System.String)">
            <summary>
            Regresa un objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> con los 
            datos de la propiedad representada por <paramref name="propertyName"/>.
            </summary>
            <remarks>
            También busca dentro de las interfaces que se implementan.
            </remarks>
            <param name="source">Tipo del objeto del cual se extraerá la propiedad.</param>
            <param name="propertyName">
            Un objeto <see cref="T:System.String"/> que representa la propiedad a obtener del objeto.
            </param>
            <returns>
            Un objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> si el objeto 
            tiene la propiedad especificada, <see langword="null"/> en caso contrario.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="propertyName"/> es <see langword="null"/>,  
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System;
            using System.ComponentModel;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void DoWork(Type type, string property)
              {
                PropertyDescriptor value = type.GetPropertyDescriptor(property);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Regresa un objeto <see cref="T:System.Reflection.PropertyInfo"/> con los 
            datos de la propiedad representada por <paramref name="propertyName"/>.
            </summary>
            <remarks>
            También busca dentro de las interfaces que se implementan.
            </remarks>
            <param name="source">Tipo del objeto del cual se extraerá la propiedad.</param>
            <param name="propertyName">
            Un objeto <see cref="T:System.String"/> que representa la propiedad a obtener del objeto.
            </param>
            <returns>
            Un objeto <see cref="T:System.Reflection.PropertyInfo"/> si el objeto 
            tiene la propiedad especificada, <see langword="null"/> en caso contrario.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="propertyName"/> es <see langword="null"/>,  
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System;
            using System.Reflection;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void DoWork(Type type, string property)
              {
                PropertyInfo value = type.GetPropertyInfo(property);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.GetPropertyValue``1(``0,System.String)">
            <summary>
            Obtiene el valor de una propiedad.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">Objeto en donde existe la propiedad.</param>
            <param name="propertyName">
            Nombre de la propiedad de la cual se extraerá el valor.
            </param>
            <returns>
            El valor de la propiedad especificada, <see langword="null"/> si la propiedad 
            no existe.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="propertyName"/> es <see langword="null"/>,  
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void DoWork(AppDomain domain)
              {
                string directory= (string)domain.GetPropertyValue("BaseDirectory");
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Indica si e atributo especificado por {T} existe en el objeto.
            </summary>
            <typeparam name="T">El tipo de {T}.</typeparam>
            <param name="source">
            Objeto <see cref="T:System.Reflection.MemberInfo"/> en donde se buscara si existe el atributo.
            </param>
            <returns>
            <see langword="true"/> si el objeto usa dicho atributo, <see langword="false"/> 
            en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using System;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void DoWork(Type type)
              {
                if(type.HasAttribute&lt;SerializableAttribute&gt;())
                {
                  //operaciones para cuando tiene el atributo
                }
                else
                {
                  //notificar que no tiene el atributo
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
            Asigna el valor de una propiedad.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">Objeto en donde existe la propiedad.</param>
            <param name="propertyName">
            Nombre de la propiedad de la cual se extraerá el valor.
            </param>
            <param name="value">
            Nuevo valor de la propiedad.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="propertyName"/> es <see langword="null"/>, 
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cuando no se encontro una propiedad con el nombre. 
            <paramref name="propertyName"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void DoWork(AppDomain domain)
              {
                domain.SetPropertyValue("BaseDirectory","nuevo valor");
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.FindPropertyDescriptor(System.Type[],System.String)">
            <summary>
            Regresa un objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> con los 
            datos de la propiedad representada por <paramref name="propertyName"/>.
            </summary>
            <param name="types">
            Un arreglo de <see cref="T:System.Type"/> en donde se buscara si existe la propiedad.
            </param>
            <param name="propertyName">
            Un objeto <see cref="T:System.String"/> que representa la propiedad a obtener del objeto.
            </param>
            <returns>
            Un objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> si el objeto 
            tiene la propiedad especificada, <see langword="null"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.FindPropertyDescriptor(System.Type,System.String)">
            <summary>
            Regresa un objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> con los 
            datos de la propiedad representada por <paramref name="propertyName"/>.
            </summary>
            <param name="source">Tipo del objeto del cual se extraerá la propiedad.</param>
            <param name="propertyName">
            Un objeto <see cref="T:System.String"/> que representa la propiedad a obtener del objeto.
            </param>
            <returns>
            Un objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> si el objeto 
            tiene la propiedad especificada, <see langword="null"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.ReflectionExtensions.FindPropertyInfo(System.Type[],System.String)">
            <summary>
            Regresa un objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> con los 
            datos de la propiedad representada por <paramref name="propertyName"/>.
            </summary>
            <param name="types">
            Un arreglo de <see cref="T:System.Type"/> en donde se buscara si existe la propiedad.
            </param>
            <param name="propertyName">
            Un objeto <see cref="T:System.String"/> que representa la propiedad a obtener del objeto.
            </param>
            <returns>
            Un objeto <see cref="T:System.ComponentModel.PropertyDescriptor"/> si el objeto 
            tiene la propiedad especificada, <see langword="null"/> en caso contrario.
            </returns>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Conversions.DataParameterFactory">
            <summary>
            Fabrica de objetos que implementan la interfaz <see cref="T:System.Data.IDataParameter"/> para que 
            sean usandos en sentencias SQL.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.DataParameterFactory.Create``1(System.Object,System.String,System.Data.ParameterDirection)">
            <summary>
            Crea una instancia de la clase {TClass} que implementa la interfaz 
            <see cref="T:System.Data.IDataParameter"/>.
            </summary>
            <typeparam name="TClass">El tipo específico de objeto a crear.</typeparam>
            <param name="value">Valor que tendra el parámetro.</param>
            <param name="name">Nombre del parámetro.</param>
            <param name="direction">
            Uno de los valores de la enumeración <see cref="T:System.Data.ParameterDirection"/> que indica la 
            dirección del parámetro.
            </param>
            <returns>
            Un objeto {TClass} que implementa la interfaz <see cref="T:System.Data.IDataParameter"/>.
            </returns>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="name"/> es <see langword="null"/>, 
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco. 
            </exception>
            <example>
            <code language="c#">
            using System.Data;
            using System.Data.OleDb;
            using Cnbv.Sait.Utilities.Conversions;
            public void Convert()
            {
              string name = "nombre";
              int value = 10;
              ParameterDirection direction = ParameterDirection.ReturnValue;
              OleDbParameter parameter = DataParameterFactory.Create&lt;OleDbParameter&gt;(
                value, name, direction);
            }
            </code>
            </example>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.WindowsApi">
            <summary>
            Clase con las llamadas al API de Windows desde .Net.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.LogOnUser(System.String,System.String,System.IntPtr)">
            <summary>
            Llama al API de Windows para autenticar al usuario.
            </summary>
            <overloads>
            Llama al API de Windows para autenticar al usuario.
            </overloads>
            <param name="userName">ID del usuario a validar.</param>
            <param name="domain">Dominio en donde se validara al usuario.</param>
            <param name="password">Contraseña del usuario a validar.</param>
            <returns>
            Si la autenticación del usuario fue exitosa un objeto <see cref="T:System.IntPtr"/> con la 
            llave del usuario en el dominio, <see cref="F:System.IntPtr.Zero"/> en caso contrario.
            </returns>
            <remarks>
            El tipo de inicio de sesión es <see cref="F:Cnbv.Sait.Utilities.Interop.LogOnType.Interactive"/> y el tipo de 
            proveedor es <see cref="F:Cnbv.Sait.Utilities.Interop.LogOnProvider.Default"/>.
            </remarks>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.LogOnUser(System.String,System.String,System.IntPtr,Cnbv.Sait.Utilities.Interop.LogOnType,Cnbv.Sait.Utilities.Interop.LogOnProvider)">
            <summary>
            Llama al API de Windows para autenticar al usuario.
            </summary>
            <param name="userName">ID del usuario a validar.</param>
            <param name="domain">Dominio en donde se validara al usuario.</param>
            <param name="password">Contraseña del usuario a validar.</param>
            <param name="type">Tipo de inicio de sesión.</param>
            <param name="provider">El proveedor de inicio de sesión.</param>
            <returns>
            Si la autenticación del usuario fue exitosa un objeto <see cref="T:System.IntPtr"/> con la 
            llave del usuario en el dominio, <see cref="F:System.IntPtr.Zero"/> en caso contrario.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="type"/> no es un valor valido dentro de la enumeración 
            <see cref="T:Cnbv.Sait.Utilities.Interop.LogOnType"/>. O cuando <paramref name="provider"/> no es un valor valido 
            dentro de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.LogOnProvider"/>
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.CloseHandle(System.IntPtr)">
            <summary>
            Llamado al API de Windows para liberar la referencia a un manejador de memoria.
            </summary>
            <param name="handle">
            Manejador que de memoria.
            </param>
            <returns>
            <see langword="true"/> si se pudo liberar la referencia, 
            <see langword="false"/> si hubo un error.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.AddConnection(Cnbv.Sait.Utilities.Interop.NetResource)">
            <summary>
            Hace una conexión a un recurso de red. La función direcciona un dispositivo 
            local a un recurso de red.
            </summary>
            <overloads>
            Hace una conexión a un recurso de red.
            </overloads>
            <param name="resource">
            Un puntero a una estructura <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> que especifica los detalles 
            de la conexión, dichos detalles pueden ser información acerca del recurso de red, 
            el dispositivo local y el proveedor de red.
            </param>
            <remarks>
            La opción de conexión es <see cref="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.None"/>. 
            La contraseña y el usuario son <see langword="null"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Si alguna de las enumeraciones de <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> tiene un valor invalido.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Cuando el resultado de la operación nativa generó un error.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.AddConnection(Cnbv.Sait.Utilities.Interop.NetResource,System.String,System.String)">
            <summary>
            Hace una conexión a un recurso de red. La función direcciona un dispositivo 
            local a un recurso de red.
            </summary>
            <param name="resource">
            Un puntero a una estructura <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> que especifica los detalles 
            de la conexión, dichos detalles pueden ser información acerca del recurso de red, 
            el dispositivo local y el proveedor de red.
            </param>
            <param name="password">
            Un puntero a una cadena terminada en nulo que especifica la contraseña a usar 
            para realizar la conexión. Si <paramref name="password"/> es 
            <see langword="null"/> la función usa la contraseña 
            asociada con el usuario indicado <paramref name="userId"/>. Si 
            <paramref name="password"/> es <see cref="F:System.String.Empty"/> la función no usa una 
            contraseña. Si la conexión falla por que se uso una contraseña invalida y la 
            bandera <see cref="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectInteractive"/> esta activa la función 
            despliega una ventana de dialogo preguntándole al usuario por la contraseña. 
            <para>
            En Windows Me/98/95: este parámetro debe de ser <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </para>
            </param>
            <param name="userId">
            Un puntero a una cadena terminada en nulo que especifica el ID del usuario a usar 
            para realizar la conexión. Si <paramref name="userId"/> es <see langword="null"/> 
            la función usa el ID del usuario que este ejecutando el proceso. 
            <paramref name="userId"/> se usa cuando los usuarios se desean conectarse a un 
            recurso de red para el cual se les ha asignado una cuenta distinta a su cuenta 
            normal. El ID del usuario representa un contexto de seguridad que puede ser 
            especifico a un proveedor de red. 
            <para>
            En Windows Me/98/95: este parámetro debe de ser <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </para>
            </param>
            <remarks>
            La opción de conexión es <see cref="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.None"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Si alguna de las enumeraciones de <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> tiene un valor invalido.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Cuando el resultado de la operación nativa generó un error.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.AddConnection(Cnbv.Sait.Utilities.Interop.NetResource,System.String,System.String,Cnbv.Sait.Utilities.Interop.ConnectionOptions)">
            <summary>
            Hace una conexión a un recurso de red. La función direcciona un dispositivo 
            local a un recurso de red.
            </summary>
            <param name="resource">
            Un puntero a una estructura <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> que especifica los detalles 
            de la conexión, dichos detalles pueden ser información acerca del recurso de red, 
            el dispositivo local y el proveedor de red.
            </param>
            <param name="password">
            Un puntero a una cadena terminada en nulo que especifica la contraseña a usar 
            para realizar la conexión. Si <paramref name="password"/> es 
            <see langword="null"/> la función usa la contraseña 
            asociada con el usuario indicado <paramref name="userId"/>. Si 
            <paramref name="password"/> es <see cref="F:System.String.Empty"/> la función no usa una 
            contraseña. Si la conexión falla por que se uso una contraseña invalida y la 
            bandera <see cref="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectInteractive"/> esta activa la función 
            despliega una ventana de dialogo preguntándole al usuario por la contraseña. 
            <para>
            En Windows Me/98/95: este parámetro debe de ser <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </para>
            </param>
            <param name="userId">
            Un puntero a una cadena terminada en nulo que especifica el ID del usuario a usar 
            para realizar la conexión. Si <paramref name="userId"/> es <see langword="null"/> 
            la función usa el ID del usuario que este ejecutando el proceso. 
            <paramref name="userId"/> se usa cuando los usuarios se desean conectarse a un 
            recurso de red para el cual se les ha asignado una cuenta distinta a su cuenta 
            normal. El ID del usuario representa un contexto de seguridad que puede ser 
            especifico a un proveedor de red. 
            <para>
            En Windows Me/98/95: este parámetro debe de ser <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </para>
            </param>
            <param name="options">
            Un conjunto de valores de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/> que 
            representan las opciones para realizar la conexión.
            </param>
            <exception cref="T:System.ArgumentException">
            Si alguna de las enumeraciones de <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> tiene un valor invalido.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="options"/> no es un valor valido dentro de la 
            enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions"/>.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Cuando el resultado de la operación nativa generó un error.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.CancelConnection(System.String,System.Boolean)">
            <summary>
            Cancela la conexión a un recurso de red. También se puede usar la función 
            a eliminar conexiones en cache las cuales no están actualmente conectadas.
            </summary>
            <overloads>
            Cancela la conexión a un recurso de red.
            </overloads>
            <param name="name">
            Un puntero a una cadena terminada en nulo que especifica el nombre del 
            dispositivo local o del recurso de red compartido del cual se quiere 
            desconectar. Si este parámetro especifica un dispositivo local esta función 
            cancela solamente el dispositivo especificado. Si el parámetro especifica un 
            recurso de red remoto se cancelan todas las conexiones que no tengan 
            asociado un dispositivo local.
            </param>
            <param name="force">
            Especifica si la desconexión debe de ocurrir aun si hay archivos abiertos o 
            trabajos pendientes en la conexión. Si este parámetro es <see langword="false"/> la 
            función falla si existen archivos abiertos o trabajos pendientes.
            </param>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException">
            Cuando <paramref name="name"/> es <see langword="null"/> o <see cref="F:System.String.Empty"/>.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Cuando el resultado de la operación nativa generó un error.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.CancelConnection(System.String,Cnbv.Sait.Utilities.Interop.DisconnectionType,System.Boolean)">
            <summary>
            Cancela la conexión a un recurso de red. También se puede usar la función 
            para eliminar conexiones en cache las cuales no están actualmente conectadas.
            </summary>
            <param name="name">
            Un puntero a una cadena terminada en nulo que especifica el nombre del 
            dispositivo local o del recurso de red compartido del cual se quiere 
            desconectar. Si este parámetro especifica un dispositivo local esta función 
            cancela solamente el dispositivo especificado. Si el parámetro especifica un 
            recurso de red remoto se cancelan todas las conexiones que no tengan 
            asociado un dispositivo local.
            </param>
            <param name="type">
            Un valor de la enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.DisconnectionType"/> que representa la opción 
            para realizar la desconexión.
            </param>
            <param name="force">
            Especifica si la desconexión debe de ocurrir aun si hay archivos abiertos o 
            trabajos pendientes en la conexión. Si este parámetro es <see langword="false"/> la 
            función falla si existen archivos abiertos o trabajos pendientes.
            </param>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="name"/> es <see langword="null"/>, 
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="type"/> no es un valor valido dentro de la 
            enumeración <see cref="T:Cnbv.Sait.Utilities.Interop.DisconnectionType"/>.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Cuando el resultado de la operación nativa generó un error.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.Validate(Cnbv.Sait.Utilities.Interop.NetResource)">
            <summary>
            Valida el estado del objeto <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/>.
            </summary>
            <param name="resource">Objeto a validar.</param>
            <exception cref="T:System.ArgumentException">
            Si alguna de las enumeraciones de <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/> tiene un valor invalido.
            </exception>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Interop.WindowsApi.ThrowIfInvalid``1(``0,``0,``0,System.String)">
            <summary>
            Lanza una excepción si <paramref name="source"/> no esta dentro del rango.
            </summary>
            <typeparam name="T">Tipo de <paramref name="source"/>.</typeparam>
            <param name="source">Objeto a validar.</param>
            <param name="min">Valor mínimo.</param>
            <param name="max">Valor máximo.</param>
            <param name="property">
            Nombre de la propiedad dentro de <see cref="T:Cnbv.Sait.Utilities.Interop.NetResource"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            Cuando <paramref name="source"/> no esta dentro del rango.
            </exception>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException">
            <summary>
            La excepción que es lanzada cuando un argumento que es <see langword="null"/> 
            o <see cref="F:System.String.Empty"/> es pasado a un método que no acepta eso como un 
            argumento valido. Esta clase no puede ser heredada.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException"/>.
            </summary>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException"/> especificando el mensaje de 
            error y una referencia a la excepción interna que es la causa de esta excepción.
            </summary>
            <param name="message">
            El mensaje de error que explica la razón de la excepción.
            </param>
            <param name="innerException">
            La excepción que es la causa de esta excepción, o <see langword="null"/> 
            si no se especifica una excepción interna.
            </param>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException"/> con el nombre del parámetro que 
            causo la excepción.
            </summary>
            <param name="message">
            El mensaje de error que explica la razón de la excepción.
            </param>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException"/> especificando el mensaje de error
            y el nombre del parámetro que causo la excepción.
            </summary>
            <param name="message">
            El mensaje de error que explica la razón de la excepción.
            </param>
            <param name="parameterName">
            El nombre del parámetro que causo la excepción.
            </param>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException"/>
            con la información de contexto y serialización especificada.
            </summary>
            <param name="info">
            Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo"/> que contiene la información 
            serializada de la excepción.
            </param>
            <param name="context">
            Objeto <see cref="T:System.Runtime.Serialization.StreamingContext"/> que describe el origen o destino de la 
            información serializada.
            </param>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.ConnectionOptions">
            <summary>
            Especifica las opciones para conectarse a una unidad de red.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.None">
            <summary>
            Se usan las opciones por defecto.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectUpdateProfile">
            <summary>
            Esta bandera le indica al sistema operativo que intente restaurar automáticamente 
            la conexión cuando el usuario se firme. El sistema operativo solamente recuerda 
            conexiones exitosas que son redirigidas a dispositivos locales. No recuerda 
            conexiones fallidas o conexiones que no son redirigidas a dispositivos locales, 
            como "Z:" por ejemplo. Si esta bandera no esta activa el sistema operativo no 
            restaura automáticamente la conexión la siguiente vez que se firme el usuario.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectInteractive">
            <summary>
            Esta bandera le indica al sistema operativo que puede interactuar con el 
            usuario para autenticarlo.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectPrompt">
            <summary>
            Esta bandera le indica al sistema no usar ninguna preferencia por defecto para 
            nombres de usuario o contraseñas sin darle la oportunidad al usuario de introducir 
            unas credenciales alternativas. Esta bandera es ignorada excepto cuando 
            <see cref="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectInteractive"/> esta activo.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectRedirect">
            <summary>
            Esta bandera fuerza la redirección a un dispositivo local cuando se hace la conexión. 
            Si <see cref="F:Cnbv.Sait.Utilities.Interop.NetResource.LocalName"/> especifica una unidad hacia donde hacer la 
            redirección esta bandera no tiene efecto por que el sistema operativo intenta 
            redireccionar la conexión a la unidad especificada. Cuando el sistema operativo 
            automáticamente escoge un dispositivo local la propiedad 
            <see cref="F:Cnbv.Sait.Utilities.Interop.NetResource.Type"/> no debe ser igual a <see cref="F:Cnbv.Sait.Utilities.Interop.ResourceType.Any"/>. 
            Si esta bandera no esta activa un dispositivo local es seleccionado automáticamente 
            solo si el recurso necesita un dispositivo local para funcionar adecuadamente. 
            <para>
            Windows Server 2003 y Windows XP: Cuando el sistema operativo asigna unidades 
            automáticamente las letras de las unidades comienzan con Z:, después Y: y terminan 
            con C:. Esto reduce colisiones entre unidades de recursos de red y discos locales. 
            Notar que en versiones anteriores de Windows las letras se comenzaban a asignar desde 
            C: y terminaban en Z:.
            </para>
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectCommandLine">
            <summary>
            Esta bandera le indica al sistema operativo que le pida las credenciales al usuario 
            por línea de comandos en lugar de una interfaz de usuario. Esta bandera es ignorada 
            a menos que la bandera <see cref="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectInteractive"/> también 
            este prendida.
            <para>
            Esta bandera no esta soportada en Windows 2000/NT y Windows Me/98/95.
            </para>
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectCmdSaveCredentials">
            <summary>
            Esta bandera le indica al sistema operativo que las credenciales que le fueron 
            solicitadas al usuario deberían de ser guardadas por el manejador de credenciales. Si 
            el manejador de credenciales esta deshabilitado para la sesión o si el proveedor de 
            red no soporta el resguardo de credenciales esta bandera es ignorada. Esta bandera 
            también es ignorada si no esta activa la bandera 
            <see cref="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.ConnectCommandLine"/>.
            <para>
            Esta bandera no esta soportada en Windows 2000/NT y Windows Me/98/95.
            </para>
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.ConnectionOptions.All">
            <summary>
            Todas las banderas de la enumeración.
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.LogOnType">
            <summary>
            Tipos de inicios de sesión.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnType.Interactive">
            <summary>
            Este tipo de inicio de sesión es destinado a usuarios que usaran la computadora 
            interactivamente, tales como un usuario conectado por una terminal o un proceso 
            similar. Este tipo de inicio de sesión tiene el costo adicional de almacenar en 
            cache las credenciales para operaciones desconectadas, por lo tanto es inadecuado 
            para ciertas aplicaciones cliente/servidor como lo puede ser un servidor de correo.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnType.Network">
            <summary>
            Este tipo de inicio de sesión es destinado a servidores de alto rendimiento para 
            autenticar contraseñas en texto plano. Este tipo de inicio de sesión no almacena 
            las credenciales en cache.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnType.Batch">
            <summary>
            Este tipo de inicio de sesión es destinado a servidores en lote en donde los 
            procesos se pueden ejecutar en nombre de un usuario sin su directa intervención. 
            Este tipo de inicio de sesión también sirve para servidores de alto rendimiento que 
            pueden procesar muchos intentos de autenticación en texto plano al mismo tiempo 
            como pueden ser servidores de correo o Web. Este tipo de inicio de sesión no almacena 
            las credenciales en cache.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnType.Service">
            <summary>
            Indica que este tipo de inicio de sesión es de servicio. La cuenta especificada debe 
            tener el permiso de servicio habilitado.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnType.Unlock">
            <summary>
            Este tipo de inicio de sesión se usa para librerías GINA que firman usuarios que 
            estarán usando la computadora de manera interactiva. Este tipo de inicio de sesión 
            puede generar un registro único de auditoria que muestra cuando se desbloqueo la 
            estación de trabajo.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnType.ClearText">
            <summary>
            Este tipo de inicio de sesión conserva el nombre y contraseña en el paquete de 
            autenticación, lo que permite al servidor hacer otras conexiones a otros servidores 
            y al mismo tiempo se hace pasar por el cliente. Un servidor puede aceptar 
            credenciales en texto plano desde un cliente, llamar a la función para iniciar la
            sesión, verificar que el usuario puede acceder al sistema a través de la red, 
            y mientras tanto comunicarse con otros servidores.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.LogOnType.Credentials">
            <summary>
            Este tipo de inicio de sesión le permite al cliente clonar su llave actual y 
            especificar credenciales nuevas para conexiones de salida. Las nuevas credenciales 
            de sesión tienen el mismo identificador local pero usa diferentes para conexiones 
            a otras redes. Este tipo de sesión solamente es soportado por el proveedor 
            <see cref="F:Cnbv.Sait.Utilities.Interop.LogOnProvider.WinNT50"/>. 
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ActionEnd">
            <summary>
              Looks up a localized string similar to [{0}]::Action End::{1}.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ActionStart">
            <summary>
              Looks up a localized string similar to [{0}]::Action Start::{1}.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.AppLogToString">
            <summary>
              Looks up a localized string similar to [Path: {0}].
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.BackSlash">
            <summary>
              Looks up a localized string similar to \.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.Colon">
            <summary>
              Looks up a localized string similar to :.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.DateFormatFull">
            <summary>
              Looks up a localized string similar to yyyyMMdd HH:mm:ss.fff.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.DisplayType">
            <summary>
              Looks up a localized string similar to DisplayType.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.Dot">
            <summary>
              Looks up a localized string similar to ..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.EntryDouble">
            <summary>
              Looks up a localized string similar to [{0}]::***{1}::{2}.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.EntrySingle">
            <summary>
              Looks up a localized string similar to [{0}]::***{1}.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionGreaterThan">
            <summary>
              Looks up a localized string similar to El argumento debe de ser menor o igual a {0}..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionGreaterThanOrEqual">
            <summary>
              Looks up a localized string similar to El argumento debe de ser menor a {0}..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionLessThan">
            <summary>
              Looks up a localized string similar to El argumento debe de ser mayor o igual a {0}..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionLessThanOrEqual">
            <summary>
              Looks up a localized string similar to El argumento debe de ser mayor a {0}..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionNull">
            <summary>
              Looks up a localized string similar to El argumento no puede ser nulo..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionOutOfRange">
            <summary>
              Looks up a localized string similar to El argumento debe de ser igual o mayor a {0} y menor o igual a {1}..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionOutOfRangeEnum">
            <summary>
              Looks up a localized string similar to El argumento esta fuera del rango legal de la enumeración..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionOutOfRangeExclusive">
            <summary>
              Looks up a localized string similar to El argumento debe de ser mayor a {0} y menor a {1}..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionOverflowToEnum">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; esta fuera del rango de valores de &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionResourceEnum">
            <summary>
              Looks up a localized string similar to El argumento tiene un valor invalido en la propiedad &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              Looks up a localized string similar to El argumento no puede ser nulo ni una cadena vacía..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ExceptionStringNullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to El argumento no puede ser nulo, una cadena vacía ni contener solamente caracteres en blanco..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.InvalidOperationExceptionDrivePath">
            <summary>
              Looks up a localized string similar to Las propiedades Path y Drive no deben ser ambas nulas, una cadena vacía o contener solamente caracteres en blanco..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.InvalidOperationExceptionEmptyPath">
            <summary>
              Looks up a localized string similar to La propiedad Path debe tener un valor antes de abrir la bitácora..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.InvalidOperationExceptionIsOpen">
            <summary>
              Looks up a localized string similar to El archivo ya se encuentra abierto..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.InvalidOperationExceptionNotOpen">
            <summary>
              Looks up a localized string similar to Debe abrir el archivo antes de intentar escribir en el mismo..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.InvalidOperationExceptionPath">
            <summary>
              Looks up a localized string similar to La propiedad Path no debe ser nulo, una cadena vacía o contener solamente caracteres en blanco..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.InvalidOperationExceptionPropertyName">
            <summary>
              Looks up a localized string similar to No se encontró una propiedad con el nombre &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.NetResourceToString">
            <summary>
              Looks up a localized string similar to [Scope: {0}; Type: {1}; DisplayType: {2}; Usage: {3}; LocalName: {4}; RemoteName: {5}; Comment: {6}; Provider: {7}].
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.NetworkDriveToString">
            <summary>
              Looks up a localized string similar to [Drive: {0}; Path: {1}].
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterArray">
            <summary>
              Looks up a localized string similar to array.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterCollection">
            <summary>
              Looks up a localized string similar to collection.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterEncoding">
            <summary>
              Looks up a localized string similar to encoding.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterException">
            <summary>
              Looks up a localized string similar to exception.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterExtension">
            <summary>
              Looks up a localized string similar to extension.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterName">
            <summary>
              Looks up a localized string similar to name.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterOperation">
            <summary>
              Looks up a localized string similar to operation.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterOptions">
            <summary>
              Looks up a localized string similar to options.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterPropertyName">
            <summary>
              Looks up a localized string similar to propertyName.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterProvider">
            <summary>
              Looks up a localized string similar to provider.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterRecord">
            <summary>
              Looks up a localized string similar to record.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterResource">
            <summary>
              Looks up a localized string similar to resource.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterSource">
            <summary>
              Looks up a localized string similar to source.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.ParameterType">
            <summary>
              Looks up a localized string similar to type.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.RegularExpressionEmail">
            <summary>
              Looks up a localized string similar to ^[a-z0-9_\+-]+(\.[a-z0-9_\+-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,4})$.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.Scope">
            <summary>
              Looks up a localized string similar to Scope.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.Type">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Cnbv.Sait.Utilities.Properties.Resources.Usage">
            <summary>
              Looks up a localized string similar to Usage.
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Validations.ValidatedNotNullAttribute">
            <summary>
            Especifica que el parámetro al que se le aplica el atributo ha sido validado
            y no puede ser nulo. Esta clase no puede ser heredada.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Validations.StateValidations">
            <summary>
            Contiene métodos genéricos para la validación de objetos y de estado de clases.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowFaultException(System.Exception)">
            <summary>
            Lanza una excepción <see cref="T:System.ServiceModel.FaultException`1"/>.
            </summary>
            <param name="exception">
            Excepción con detalles del error ocurrido.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="exception"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:System.ServiceModel.FaultException`1">
            Cuando <paramref name="exception"/> no es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.ComponentModel;
            using System.ServiceModel;
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate()
             {
              MyContractClient proxy = new MyContractClient(endpointName);
              try
              {
               proxy.MethodWithError( );
              }
              catch(FaultException&lt;ExceptionDetail&gt; exception)
              {
               Debug.Assert(exception.Detail.Type==typeof(InvalidOperationException).ToString());
               Debug.Assert(exception.Message=="Some error");
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfDisposed(System.Func{System.Boolean},System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ObjectDisposedException"/> si el resultado de 
            la función <paramref name="operation"/> es <see langword="true"/>.
            </summary>
            <param name="operation">
            Una función de donde se obtiene un valor <see langword="true"/> o 
            <see langword="false"/>.
            </param>
            <param name="name">Nombre del objeto que ya fue eliminado.</param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="operation"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Cuando la función en <paramref name="operation"/> regresa <see langword="true"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.IO;
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate(FileStream stream, bool disposed)
             {
              StateValidations.ThrowIfDisposed(()=&gt; disposed, "stream");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfGreaterThan``1(``0,``0,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentException"/> si el objeto 
            es mayor a <paramref name="value"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="value">Valor con el cual se va a comparar.</param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:System.ArgumentException">
            Cuando <paramref name="source"/> es mayor a <paramref name="value"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate(int result)
             {
              result.ThrowIfGreaterThan(10, "result");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfGreaterThanOrEqual``1(``0,``0,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentException"/> si el objeto 
            es mayor o igual a <paramref name="value"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="value">Valor con el cual se va a comparar.</param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:System.ArgumentException">
            Cuando <paramref name="source"/> es mayor o igual a <paramref name="value"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate(int result)
             {
              result.ThrowIfGreaterThanOrEqual(10, "result");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfInvalidEnum``1(``0,``0,``0,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentOutOfRangeException"/> si el valor 
            de la enumeración es menor a <paramref name="minimumValue"/> o 
            mayor a <paramref name="maximumValue"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="value"/>.</typeparam>
            <param name="value">Dato a validar.</param>
            <param name="minimumValue">
            Valor mínimo (inclusivo) de <paramref name="value"/>.
            </param>
            <param name="maximumValue">
            Valor máximo (inclusivo) de <paramref name="value"/>.
            </param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="value"/> es menor a <paramref name="minimumValue"/> 
            o mayor a <paramref name="maximumValue"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            <para>
            public enum OleDBProvider
            {
             Sybase = 0x0000,
             MSSql = 0x0001,
             Access = 0x0002,
            };
            </para>
            public class TestClass
            {
             public void CheckEnum(OleDBProvider provider)
             {
              provider.ThrowIfInvalidEnum(OleDBProvider.Sybase, OleDBProvider.Access,"provider");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfInvalidArgument(System.Func{System.Boolean},System.String,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentException"/> si el resultado de 
            la función <paramref name="operation"/> es <see langword="true"/>.
            </summary>
            <param name="operation">
            Una función de donde se obtiene un valor <see langword="true"/> o 
            <see langword="false"/>.
            </param>
            <param name="name">Nombre del objeto.</param>
             <param name="message">
            Mensaje que aparecerá en la excepción.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="operation"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Cuando la función en <paramref name="operation"/> es <see langword="true"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void InvalidArgument(string argumento)
             {
              bool result = true;
              StateValidations.ThrowIfInvalidArgument(() =&gt; (result), "argumento","mensaje");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfInvalidOperation(System.Func{System.Boolean},System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.InvalidOperationException"/> si el resultado de 
            la función <paramref name="operation"/> es <see langword="true"/>.
            </summary>
            <param name="operation">
            Una función de donde se obtiene un valor <see langword="true"/> o 
            <see langword="false"/>.
            </param>
            <param name="message">
            Mensaje que aparecerá en la excepción.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="operation"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cuando la función en <paramref name="operation"/> es <see langword="true"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void InvalidOperation()
             {
              bool result = true;
              StateValidations.ThrowIfInvalidOperation(() =&gt; (result), "Operación invalida");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfLessThan``1(``0,``0,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentException"/> si el objeto 
            es menor a <paramref name="value"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="value">Valor con el cual se va a comparar.</param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:System.ArgumentException">
            Cuando <paramref name="source"/> es menor a <paramref name="value"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate(int result)
             {
              result.ThrowIfLessThan(10,"result");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfLessThanOrEqual``1(``0,``0,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentException"/> si el objeto 
            es menor o igual a <paramref name="value"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">El valor a verificar.</param>
            <param name="value">Valor con el cual se va a comparar.</param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:System.ArgumentException">
            Cuando <paramref name="source"/> es menor o igual a <paramref name="value"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate(int result)
             {
              result.ThrowIfLessThanOrEqual(10,"result");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfNotSupported(System.Func{System.Boolean},System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.NotSupportedException"/> si el resultado de 
            la función <paramref name="operation"/> es <see langword="true"/>.
            </summary>
            <param name="operation">
            Una función de donde se obtiene un valor <see langword="true"/> o 
            <see langword="false"/>.
            </param>
            <param name="message">
            Mensaje que aparecerá en la excepción.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="operation"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Cuando la función en <paramref name="operation"/> es <see langword="true"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void NotSupported()
             {
              bool result = true;
              StateValidations.ThrowIfNotSupported(() =&gt; (result), "Operación no soportada");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfNull``1(``0,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentNullException"/> 
            si el objeto es <see langword="null"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="value"/>.</typeparam>
            <param name="value">Dato a validar.</param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="value"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System;
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate(IDisposable info)
             {
              info.ThrowIfNull("info");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Lanza una excepción <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException"/> si el objeto 
            <see cref="T:System.String"/> es <see langword="null"/> o <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="value">Dato a validar.</param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrEmptyException">
            Cuando <paramref name="value"/> es <see langword="null"/> o 
            <see cref="F:System.String.Empty"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate(string result)
             {
              result.ThrowIfNullOrEmpty("result");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Lanza una excepción <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException"/> si el objeto 
            <see cref="T:System.String"/> es <see langword="null"/>, <see cref="F:System.String.Empty"/> o 
            contiene solamente caracteres en blanco.
            </summary>
            <param name="source">Dato a validar.</param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="source"/> es <see langword="null"/>, 
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void Validate(string result)
             {
              result.ThrowIfNullOrWhiteSpace("result");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfOutOfRange``1(``0,``0,``0,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentOutOfRangeException"/> si el objeto 
            es menor a <paramref name="minimumValue"/> o mayor a 
            <paramref name="maximumValue"/>.
            </summary>
            <typeparam name="T">El tipo de <paramref name="value"/>.</typeparam>
            <param name="value">Dato a validar.</param>
            <param name="minimumValue">
            Valor mínimo (inclusivo) de <paramref name="value"/>.
            </param>
            <param name="maximumValue">
            Valor máximo (inclusivo) de <paramref name="value"/>.
            </param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="value"/> es menor a <paramref name="minimumValue"/> 
            o mayor a <paramref name="maximumValue"/> de manera inclusiva.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckRange(int currentValue)
             {
              int minimumValue = 2;
              int maximumValue = 10;
              currentValue.ThrowIfOutOfRange(minimumValue, maximumValue, "currentValue");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfOutOfRangeExclusive``1(``0,``0,``0,System.String)">
            <summary>
            Lanza una excepción <see cref="T:System.ArgumentOutOfRangeException"/> si el objeto 
            es menor a <paramref name="minimumValue"/> o mayor a 
            <paramref name="maximumValue"/> de manera exclusiva.
            </summary>
            <typeparam name="T">El tipo de <paramref name="value"/>.</typeparam>
            <param name="value">Dato a validar.</param>
            <param name="minimumValue">
            Valor mínimo (exclusivo) de <paramref name="value"/>.
            </param>
            <param name="maximumValue">
            Valor máximo (exclusivo) de <paramref name="value"/>.
            </param>
            <param name="name">Nombre del objeto.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="value"/> es menor a <paramref name="minimumValue"/> 
            o mayor a <paramref name="maximumValue"/> de manera exclusiva.
            </exception>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckRange(int currentValue)
             {
              int minimumValue = 2;
              int maximumValue = 10;
              currentValue.ThrowIfOutOfRangeExclusive(minimumValue, maximumValue, "currentValue");
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.StateValidations.ThrowIfWin32Error(System.Int32)">
            <summary>
            Lanza una excepción <see cref="T:System.ComponentModel.Win32Exception"/> cuando el objeto 
            <see cref="T:System.Int32"/> que representa el resultado de un llamado al API de Windows 
            es mayor a cero.
            </summary>
            <param name="win32Result">
            Resultado de la llamada al API de Windows.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Cuando <paramref name="win32Result"/> es mayor a cero.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System;
            using System.Runtime.InteropServices;
            using Cnbv.Sait.Utilities.Validations;
            </para>
            <para>
            [StructLayout(LayoutKind.Sequential)]
            public struct NetResource
            {
             public int Scope;
             public int Type;
             public int DisplayType;
             public int Usage;
             [MarshalAs(UnmanagedType.LPWStr)]
             public string LocalName;
             [MarshalAs(UnmanagedType.LPWStr)]
             public string RemoteName;
             [MarshalAs(UnmanagedType.LPWStr)]
             public string Comment;
             [MarshalAs(UnmanagedType.LPWStr)]
             public string Provider;
            }
            </para>
            <para>
            [Flags()]
            public enum ConnectionOptions
            {
             None = 0x0000,
             ConnectUpdateProfile = 0x0001,
             ConnectInteractive = 0x0008,
             ConnectPrompt = 0x0010,
             ConnectRedirect = 0x0080,
             ConnectCommandLine = 0x0800,
             ConnectCmdSaveCredentials = 0x1000,
            }
            </para>
            <para>
            public static class Data
            {
             internal const int ResourceTypeDisk = 0x1;
             internal const int ResourceGlobalNet = 0x2;
             internal const int ResourceDisplayTypeShare = 0x3;
             internal const int ResourceUsageConnectable = 0x1;
             //llamdo al API de Windows para conectarse a un acceso remoto
             [DllImport("mpr.dll", SetLastError = true, EntryPoint = "WNetAddConnection2W", 
              CharSet = CharSet.Unicode)]
             internal static extern int WNetAddConnection(
              ref NetResource netResource,
              [MarshalAs(UnmanagedType.LPWStr)] string password, 
              [MarshalAs(UnmanagedType.LPWStr)] string userId, 
              [MarshalAs(UnmanagedType.I4)] ConnectionOptions options);
            }
            </para>
            public class TestClass
            {
             public void Validate(string userId, string password, ConnectionOptions options) 
             {
              NetResource netResource = new NetResource() 
              {
               Scope = Data.ResourceGlobalNet,
               Type = Data.ResourceTypeDisk,
               DisplayType = Data.ResourceDisplayTypeShare,
               Usage = Data.ResourceUsageConnectable,
               Comment = null,
               Provider = null
              };
              int result = Data.WNetAddConnection(ref netResource, password, userId, options);
              result.ThrowIfWin32Error();
             }
            }
            </code>
            </example>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            <summary>
            La excepción que es lanzada cuando un argumento que es <see langword="null"/>, 
            <see cref="F:System.String.Empty"/> o que contiene solamente caracteres en blanco es pasado 
            a un método que no acepta eso como un argumento valido. 
            Esta clase no puede ser heredada.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException"/>.
            </summary>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException"/> especificando el mensaje 
            de error y una referencia a la excepción interna que es la causa de
            esta excepción.
            </summary>
            <param name="message">
            El mensaje de error que explica la razón de la excepción.
            </param>
            <param name="innerException">
            La excepción que es la causa de esta excepción, o <see langword="null"/> 
            si no se especifica una excepción interna.</param>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException"/> con el nombre del parámetro 
            que causo la excepción.
            </summary>
            <param name="message">
            El mensaje de error que explica la razón de la excepción.
            </param>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException"/> especificando el mensaje 
            de error y el nombre del parámetro que causo la excepción.
            </summary>
            <param name="message">
            El mensaje de error que explica la razón de la excepción.
            </param>
            <param name="parameterName">
            El nombre del parámetro que causo la excepción.
            </param>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException"/>
            con la información de contexto y serialización especificada.
            </summary>
            <param name="info">
            Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo"/> que contiene la información 
            serializada de la excepción.
            </param>
            <param name="context">
            Objeto <see cref="T:System.Runtime.Serialization.StreamingContext"/> que describe el origen o destino de la 
            información serializada.
            </param>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions">
            <summary>
            Provee un conjunto de métodos estáticos que agregan funcionalidad para 
            <see cref="T:System.IO.FileInfo"/>.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.Precision">
            <summary>
            Constante con la cual se maneja la precisión.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.ScaleKB">
            <summary>
            Constante con la cual se obtienen el tamaño en KB.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.ScaleMB">
            <summary>
            Constante con la cual se obtienen el tamaño en MB.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.ScaleGB">
            <summary>
            Constante con la cual se obtienen el tamaño en GB.
            </summary>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.ChangeExtension(System.IO.FileInfo,System.String)">
            <summary>
            Cambia la extensión de un archivo.
            </summary>
            <param name="source">
            Objeto <see cref="T:System.IO.FileInfo"/> con información del archivo.
            </param>
            <param name="extension">Nueva extensión del archivo.</param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="extension"/> es <see langword="null"/>,  
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.IO;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work()
              {
                FileInfo info = new FileInfo("c:\\log.txt");
                info.ChangeExtension("xml");
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.LengthInKB(System.IO.FileInfo)">
            <summary>
            Regresa el tamaño del archivo actual en Kilobytes.
            </summary>
            <param name="source">
            Objeto <see cref="T:System.IO.FileInfo"/> con información del archivo.
            </param>
            <returns>
            Si el archivo existe regresa su tamaño en Kilobytes, en caso contrario 
            regresa cero.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.IO;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work()
              {
                FileInfo info = new FileInfo("c:\\log.txt");
                float size = info.LengthInKB();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.LengthInMB(System.IO.FileInfo)">
            <summary>
            Regresa el tamaño del archivo actual en Megabytes.
            </summary>
            <param name="source">
            Objeto <see cref="T:System.IO.FileInfo"/> con información del archivo.
            </param>
            <returns>
            Si el archivo existe regresa su tamaño en Megabytes, en caso contrario 
            regresa cero.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.IO;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work()
              {
                FileInfo info = new FileInfo("c:\\log.txt");
                float size = info.LengthInMB();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.LengthInGB(System.IO.FileInfo)">
            <summary>
            Regresa el tamaño del archivo actual en Gigabytes.
            </summary>
            <param name="source">
            Objeto <see cref="T:System.IO.FileInfo"/> con información del archivo.
            </param>
            <returns>
            Si el archivo existe regresa su tamaño en Gigabytes, en caso contrario 
            regresa cero.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.IO;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work()
              {
                FileInfo info = new FileInfo("c:\\log.txt");
                float size = info.LengthInGB();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            Le cambia el nombre a un archivo.
            </summary>
            <param name="source">
            Objeto <see cref="T:System.IO.FileInfo"/> con información del archivo.
            </param>
            <param name="name">Nuevo nombre del archivo.</param>
            <exception cref="T:System.ArgumentNullException">
            Cuando <paramref name="source"/> es <see langword="null"/>.
            </exception>
            <exception cref="T:Cnbv.Sait.Utilities.Validations.ArgumentNullOrWhiteSpaceException">
            Cuando <paramref name="name"/> es <see langword="null"/>,  
            <see cref="F:System.String.Empty"/> o contiene solamente caracteres en blanco.
            </exception>
            <example>
            <code language="c#">
            <para>
            using System.IO;
            using Cnbv.Sait.Utilities.Extensions;
            </para>
            public class TestClass
            {
              public void Work()
              {
                FileInfo info = new FileInfo("c:\\log.txt");
                info.Rename("nuevo.txt");
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Extensions.FileInfoExtensions.GetSize(System.Int64,System.Int32)">
            <summary>
            Regresa el tamaño del archivo en base a la escala que se utilizara.
            </summary>
            <param name="length">Tamaño en bytes del archivo.</param>
            <param name="scale">
            En que escala se convertirá, por ejemplo 1024 para KB o 1048576 para MB.
            </param>
            <returns>
            El tamaño del archivo convertido a la escala especificada.
            </returns>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Interop.DisconnectionType">
            <summary>
            Especifica las opciones para desconectarse de una unidad de red.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.DisconnectionType.None">
            <summary>
            El sistema no actualiza información acerca de la conexión. Si la conexión fue 
            marcada como persistente el sistema continua restaurando la conexión la 
            siguiente vez que el usuario se firme al sistema. Si la conexión no fue marcada 
            como persistente el sistema ignora el valor de la opción ConnectUpdateProfile.
            </summary>
        </member>
        <member name="F:Cnbv.Sait.Utilities.Interop.DisconnectionType.ConnectUpdateProfile">
            <summary>
            El sistema actualiza el perfil del usuario para que la conexión ya no sea 
            persistente. El sistema no restaurara la conexión la siguiente vez que el 
            usuario se firme al sistema. (Desconectar recursos usando nombres remotos 
            no tiene efecto en conexiones persistentes).
            </summary>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Validations.NetValidations">
            <summary>
            Contiene métodos genéricos para la validación de elementos relacionados con redes.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.NetValidations.IsEmail(System.String)">
            <summary>
            Indica si la cadena representa una dirección de correo electrónico valida.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa una dirección de 
            correo electrónico valida, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckEmail(string email)
             {
              if(email.IsEmail())
              {
               //operaciones para un email valido.
              }
              else
              {
               //notificar que la cadena no representa un email.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.NetValidations.IsIPAddress(System.String)">
            <summary>
            Indica si la cadena representa una dirección IP valida.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa una dirección IP 
            valida, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckAddress(string address)
             {
              if(address.IsIPAddress())
              {
               //operaciones para un dirección IP valida.
              }
              else
              {
               //notificar que la dirección IP es invalida.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.NetValidations.IsIPAddressWithPort(System.String)">
            <summary>
            Indica si la cadena representa una dirección IP con puerto valida.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa una dirección IP 
            con puerto valida, <see langword="false"/> en caso contrario.
            </returns>
            <remarks>
            Como la búsqueda del puerto se realiza mediante el carácter de dos puntos, 
            este método no funciona de manera adecuada con una dirección IP V6.
            </remarks>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckAddress(string address)
             {
              if(address.IsIPAddressWithPort())
              {
               //operaciones para un dirección IP (172.16.100.100:800) valida.
              }
              else
              {
               //notificar que la dirección IP es invalida.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.NetValidations.IsIPAddressV6(System.String)">
            <summary>
            Indica si la cadena representa una dirección IP versión 6 valida.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa una dirección IP 
            versión 6 valida, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckAddress(string address)
             {
              if(address.IsIPAddressV6())
              {
               //operaciones para un dirección IP V6 
               //(2001:0db8:85a3:0000:0000:8a2e:0370:7334) valida.
              }
              else
              {
               //notificar que la dirección IP es invalida.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.NetValidations.IsUri(System.String)">
            <summary>
            Indica si la cadena representa una dirección URI valida.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            <see langword="true"/> si <paramref name="source"/> representa una dirección URI 
            valida, <see langword="false"/> en caso contrario.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Validations;
            </para>
            public class TestClass
            {
             public void CheckUri(string address)
             {
              if(address.IsUri())
              {
               //operaciones para un dirección URI valida.
              }
              else
              {
               //notificar que la dirección no es valida.
              }
             }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.NetValidations.SplitIPAddress(System.String)">
            <summary>
            Separa una cadena en formato IP:Puerto para tener en elementos separados la parte 
            que representa la dirección IP y la parte que representa el puerto.
            </summary>
            <param name="expression">Cadena con información de la dirección IP.</param>
            <returns>
            Un arreglo de cadenas con información de la dirección IP separada en elementos.
            </returns>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Validations.NetValidations.GetAddressFamily(System.String)">
            <summary>
            Obtiene la familia de la dirección IP.
            </summary>
            <param name="source">La cadena a validar.</param>
            <returns>
            Un valor de la enumeración <see cref="T:System.Net.Sockets.AddressFamily"/> 
            que indica la familia de la dirección IP.
            </returns>
        </member>
        <member name="T:Cnbv.Sait.Utilities.Conversions.ValueConversions">
            <summary>
            Contiene métodos de extensión para convertir a valores.
            </summary>
            <threadsafety>
            Cualquier miembro público estático de este tipo se consideran seguros para múltiples 
            hilos de ejecución. No se garantiza que sean seguros cualquiera de los miembros de 
            instancia.
            </threadsafety>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToBoolean``1(``0)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un valor 
            <see cref="T:System.Boolean"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>.
            </param>
            <returns>
            Un objeto <see cref="T:System.Boolean"/> equivalente al valor de <paramref name="source"/>. O 
            <see langword="false"/> si <paramref name="source"/> es <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(object data)
              {
                bool newValue = data.ToBoolean();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToByte``1(``0)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un valor 
            <see cref="T:System.Byte"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>.
            </param>
            <returns>
            Un objeto <see cref="T:System.Byte"/> equivalente al valor de <paramref name="source"/>. O 0 
            si <paramref name="source"/> es <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(object data)
              {
                byte newValue = data.ToByte();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToDateTime``1(``0)">
            <summary>
            Convierte el valor especificado en <paramref name="source"/> a un valor de 
            <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <overloads>
            Convierte el valor especificado en <paramref name="source"/> a un valor de 
            <see cref="T:System.DateTime"/>.
            </overloads>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>.
            </param>
            <returns>
            Un objeto <see cref="T:System.DateTime"/> equivalente al valor de <paramref name="source"/>. 
            O un valor equivalente a <see cref="F:System.DateTime.MinValue"/> si 
            <paramref name="source"/> es <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(object data)
              {
                DateTime newValue = data.ToDateTime();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToDateTime``1(``0,System.IFormatProvider)">
            <summary>
            Convierte el valor especificado en <paramref name="source"/> a un valor de 
            <see cref="T:System.DateTime"/> 
            usando la información de cultura especificada.
            </summary>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>.
            </param>
            <param name="provider">
            Un objeto que implementa la interfaz <see cref="T:System.IFormatProvider"/> que provee 
            información para formateo de la cultura.
            </param>
            <returns>
            Un objeto <see cref="T:System.DateTime"/> equivalente al valor de <paramref name="source"/>. 
            O un valor equivalente a <see cref="F:System.DateTime.MinValue"/> si <paramref name="source"/> 
            es <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            using System.Globalization;
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(object data)
              {
                DateTime newValue = data.ToDateTime(CultureInfo.CurrentCulture);
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToDouble``1(``0)">
            <summary>
            Convierte el valor del objeto especificado a un número flotante de 
            precisión doble.
            </summary>
            <remarks>
            <para>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </para>
            <para>
            El resultado es el valor que regrese la invocación del método 
            <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/> del tipo <typeparamref name="T"/>.
            </para>
            </remarks>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>, o 
            <see langword="null"/>.
            </param>
            <returns>
            Un número flotante de precisión doble. equivalente al valor de 
            <paramref name="source"/>, o cero si <paramref name="source"/> es 
            <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public class TestClass
            {
              public void Convert(object data)
              {
                double newValue = data.ToDouble();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToEnum``1(System.String)">
            <summary>
            Convierte la representación en cadena del nombre o valor numérico de uno o 
            mas de los valores de la enumeración a su equivalente en un objeto enumerado.
            </summary>
            <typeparam name="TEnum">
            El tipo de la enumeración al cual se convertirá el valor.
            </typeparam>
            <param name="source">
            Una cadena que contiene el nombre o valor a convertir.
            </param>
            <returns>
            Un objeto de tipo {TEnum} cuyo valor es representado por 
            <paramref name="source"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            Cuando <paramref name="source"/> esta fuera del rango de valores de {TEnum}.
            </exception>
            <example>
            <code language="c#">
            using Cnbv.Sait.Utilities.Conversions;
            public enum OleDBProvider
            {
              Sybase = 0x0000,
              MSSql = 0x0001,
              Access = 0x0002,
            };
            public class TestClass
            {
              public void Convert(string value)
              {
                OleDBProvider newValue = value.ToEnum&lt;OleDBProvider&gt;();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToInt16``1(``0)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un valor 
            <see cref="T:System.Int16"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>.
            </param>
            <returns>
            Un objeto <see cref="T:System.Int16"/> equivalente al valor de <paramref name="source"/>. O 
            cero si <paramref name="source"/> es <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Conversions;
            </para>
            public class TestClass
            {
              public void Convert(object data)
              {
                short newValue = data.ToInt16();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToInt32``1(``0)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un valor 
            <see cref="T:System.Int32"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>.
            </param>
            <returns>
            Un objeto <see cref="T:System.Int32"/> equivalente al valor de <paramref name="source"/>. O 
            cero si <paramref name="source"/> es <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Conversions;
            </para>
            public class TestClass
            {
              public void Convert(object data)
              {
                int newValue = data.ToInt32();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToInt64``1(``0)">
            <summary>
            Convierte el valor especificado en <paramref name="source "/> a un valor 
            <see cref="T:System.Int64"/>.
            </summary>
            <remarks>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>.
            </param>
            <returns>
            Un objeto <see cref="T:System.Int64"/> equivalente al valor de <paramref name="source"/>. O 
            cero si <paramref name="source"/> es <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Conversions;
            </para>
            public class TestClass
            {
              public void Convert(object data)
              {
                long newValue = data.ToInt64();
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Cnbv.Sait.Utilities.Conversions.ValueConversions.ToSingle``1(``0)">
            <summary>
            Convierte el valor del objeto especificado a un número flotante de 
            precisión sencilla.
            </summary>
            <remarks>
            <para>
            La información de cultura usada es <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </para>
            <para>
            El resultado es el valor que regrese la invocación del método 
            <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/> del tipo <typeparamref name="T"/>.
            </para>
            </remarks>
            <typeparam name="T">El tipo de <paramref name="source"/>.</typeparam>
            <param name="source">
            Un objeto que implementa la interfaz <see cref="T:System.IConvertible"/>, o 
            <see langword="null"/>.
            </param>
            <returns>
            Un número flotante de precisión sencilla. equivalente al valor de 
            <paramref name="source"/>, o cero si <paramref name="source"/> es 
            <see langword="null"/>.
            </returns>
            <example>
            <code language="c#">
            <para>
            using Cnbv.Sait.Utilities.Conversions;
            </para>
            public class TestClass
            {
              public void Convert(object data)
              {
                float newValue = data.ToSingle();
              }
            }
            </code>
            </example>
        </member>
    </members>
</doc>
